<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Resto.Front.Api.V3</name>
    </assembly>
    <members>
        <member name="T:Resto.Front.Api.V3.Attributes.PluginLicenseModuleIdAttribute">
            <summary>
            Specifies plugin's licensable module identifier.
            </summary>
            <remarks>
            If plugin is intended to be distributed by “license per plugin” scheme,
            contact iiko to register licensable module for your plugin,
            then apply this attribute to plugin with received module identifier.
            
            Each plugin instance will require another one license slot,
            so total slots number for given license module should correspond to count of simultaneously running iikoFronts with your plugin installed to.
            </remarks>
            <example>
            <code>
            [PluginLicenseModuleIdAttribute(42)]
            public sealed class MyPlugin : MarshalByRefObject, IFrontPlugin
            { ... }
            </code>
            </example>
        </member>
        <member name="M:Resto.Front.Api.V3.Attributes.PluginLicenseModuleIdAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Attributes.PluginLicenseModuleIdAttribute"/> class.
            </summary>
            <param name="moduleId">The licensable module identifier.</param>
        </member>
        <member name="P:Resto.Front.Api.V3.Attributes.PluginLicenseModuleIdAttribute.ModuleId">
            <summary>
            Licensable module identifier.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Attributes.SingleInstancePluginAttribute">
            <summary>
            Specifies plugin which allows only single instance per iikoFront group.
            While all plugin instances are loaded by each iikoFront by default,
            this attribute restricts only one iikoFront to load single plugin instance.    
            </summary>
            <remarks>
            Apply this attribute to your root plugin class (which implements <see cref="T:Resto.Front.Api.V3.IFrontPlugin"/>),
            if plugin will be installed to all iikoFronts, but several plugin instances shouldn't process same data and notifications.
            <br/>
            For example, this can be useful for monitoring and publishing order changes to external server.
            Single plugin instance is enough for such tasks and multiple instances may be unwanted.
            Multiple plugin instances on each iikoFront will see same data due to synchronization between iikoFronts,
            so parallel repeated processing will lead to duplicated server calls.
            </remarks>
            <example>
            <code>
            [SingleInstancePlugin]
            public sealed class MyPlugin : MarshalByRefObject, IFrontPlugin
            { ... }
            </code>
            </example>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.LicenseRestrictionException">
            <summary>
            The exception that is thrown on calling unlicensed operation.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.FrontApiException">
            <summary>
            Represents a common base error in either the service or client side of Api.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.FrontApiException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.FrontApiException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.FrontApiException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.FrontApiException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.FrontApiException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.FrontApiException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.FrontApiException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.FrontApiException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.FrontApiException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.FrontApiException"/> class with serialized data.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.LicenseRestrictionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.LicenseRestrictionException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.LicenseRestrictionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.LicenseRestrictionException"/> class with a specified error message.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.LicenseSlotReleaseException">
            <summary>
            The exception that is thrown when license slot cannot be released.
            </summary>
            <remarks>
            The most likely reason for this exception is license server inaccessibility due to network problem or internal error.
            Make sure to repeat attempt after a while to prevent slot leakage.
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.LicenseSlotReleaseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.LicenseSlotReleaseException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.LicenseSlotReleaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.LicenseSlotReleaseException"/> class with a specified error message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.LicenseSlotReleaseException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.LicenseSlotReleaseException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.IPaymentDataContextExtensions.SetRollbackData``1(Resto.Front.Api.V3.IPaymentDataContext,``0)">
            <summary>
            Method to set your data to store in iiko storage. 
            Data will be saved no disk after successful payment. 
            </summary>
            <typeparam name="T">Should be <see cref="T:System.SerializableAttribute"/> public class.</typeparam>
            <param name="context">Payment data context.</param>
            <param name="data">Your data. Please save only data that you may need on operation rollback. Max serialized to string data length is <see cref="F:Resto.Framework.Common.CommonConstants.MaxExternalPaymentItemDataLength"/></param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.IPaymentDataContextExtensions.GetRollbackData``1(Resto.Front.Api.V3.IPaymentDataContext)">
            <summary>
            Method to get your data from iiko storage.
            </summary>
            <param name="context">Payment data context.</param>
            <typeparam name="T">Should be <see cref="T:System.SerializableAttribute"/> public class.</typeparam>
            <returns>Data that you previosly stored.</returns>
        </member>
        <member name="T:Resto.Front.Api.V3.IPaymentDataContext">
            <summary>
            Helper to work with plugin saved data in iiko storage.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IPaymentDataContext.SetInfoForReports(System.String,System.String)">
            <summary>
            Method to set card number and card type to display in iiko reports.
            Data will be saved on disk after successful payment. 
            </summary>
            <param name="cardNumber"></param>
            <param name="cardType"></param>
        </member>
        <member name="M:Resto.Front.Api.V3.IPaymentDataContext.SetRollbackData(System.String)">
            <summary>
            Method to set your data to store in iiko storage. 
            Data will be saved no disk after successful payment. 
            </summary>
            <param name="serializedData">Your data. Please save only data that you may need on operation rollback. Max serialized to string data length is <see cref="F:Resto.Framework.Common.CommonConstants.MaxExternalPaymentItemDataLength"/></param>
        </member>
        <member name="M:Resto.Front.Api.V3.IPaymentDataContext.GetRollbackData">
            <summary>
            Method to get your data from iiko storage.
            </summary>
            <returns>Data that you previosly stored.</returns>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Assortment.ProductExtensions">
            <summary>
            Provides a set of static methods to access referenced entities.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Assortment.ProductExtensions.GetParent(Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns parent of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Assortment.ProductExtensions.TryGetParent(Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns parent of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Assortment.ProductExtensions.GetSimpleModifiers(Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns simpleModifiers of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Assortment.ProductExtensions.TryGetSimpleModifiers(Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns simpleModifiers of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Assortment.ProductExtensions.GetGroupModifiers(Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns groupModifiers of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Assortment.ProductExtensions.TryGetGroupModifiers(Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns groupModifiers of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Assortment.ProductExtensions.GetIncludedInMenuSections(Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns includedInMenuSections of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Assortment.ProductExtensions.TryGetIncludedInMenuSections(Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns includedInMenuSections of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Assortment.ProductGroupExtensions">
            <summary>
            Provides a set of static methods to access referenced entities.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Assortment.ProductGroupExtensions.GetParent(Resto.Front.Api.V3.Data.Assortment.IProductGroup,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns parent of the specified productGroup.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Assortment.ProductGroupExtensions.TryGetParent(Resto.Front.Api.V3.Data.Assortment.IProductGroup,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns parent of the specified productGroup or <c>null</c> if productGroup doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Assortment.ProductGroupExtensions.GetChildProducts(Resto.Front.Api.V3.Data.Assortment.IProductGroup,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns childProducts of the specified productGroup.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Assortment.ProductGroupExtensions.TryGetChildProducts(Resto.Front.Api.V3.Data.Assortment.IProductGroup,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns childProducts of the specified productGroup or <c>null</c> if productGroup doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Assortment.ProductGroupExtensions.GetChildGroups(Resto.Front.Api.V3.Data.Assortment.IProductGroup,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns childGroups of the specified productGroup.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Assortment.ProductGroupExtensions.TryGetChildGroups(Resto.Front.Api.V3.Data.Assortment.IProductGroup,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns childGroups of the specified productGroup or <c>null</c> if productGroup doesn't exist.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Orders.OrderExtensions">
            <summary>
            Provides a set of static methods to access child entities.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Orders.OrderExtensions.GetGuests(Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns guests of the specified order.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Orders.OrderExtensions.TryGetGuests(Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns guests of the specified order or <c>null</c> if order doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Orders.OrderExtensions.GetGuest(Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.IOperationService,System.Guid)">
            <summary>
            Returns guest by id from the specified order.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Orders.OrderExtensions.TryGetGuest(Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.IOperationService,System.Guid)">
            <summary>
            Returns guest by id from the specified order or <c>null</c> if order doesn't exist or doesn't contain guest with that id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Orders.OrderExtensions.GetProducts(Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns products of the specified order.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Orders.OrderExtensions.TryGetProducts(Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns products of the specified order or <c>null</c> if order doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Orders.OrderExtensions.GetProduct(Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.IOperationService,System.Guid)">
            <summary>
            Returns product by id from the specified order.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Orders.OrderExtensions.TryGetProduct(Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.IOperationService,System.Guid)">
            <summary>
            Returns product by id from the specified order or <c>null</c> if order doesn't exist or doesn't contain product with that id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Orders.OrderExtensions.GetPayments(Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns payments of the specified order.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Orders.OrderExtensions.TryGetPayments(Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns payments of the specified order or <c>null</c> if order doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Orders.OrderExtensions.GetPayment(Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.IOperationService,System.Guid)">
            <summary>
            Returns payment by id from the specified order.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Orders.OrderExtensions.TryGetPayment(Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.IOperationService,System.Guid)">
            <summary>
            Returns payment by id from the specified order or <c>null</c> if order doesn't exist or doesn't contain payment with that id.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Orders.OrderItemProductExtensions">
            <summary>
            Provides a set of static methods to access child entities.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Orders.OrderItemProductExtensions.GetAssignedModifiers(Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns assignedModifiers of the specified orderItemProduct.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Orders.OrderItemProductExtensions.TryGetAssignedModifiers(Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.IOperationService)">
            <summary>
            Returns assignedModifiers of the specified orderItemProduct or <c>null</c> if orderItemProduct doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Orders.OrderItemProductExtensions.GetAssignedModifier(Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.IOperationService,System.Guid)">
            <summary>
            Returns assignedModifier by id from the specified orderItemProduct.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Data.Orders.OrderItemProductExtensions.TryGetAssignedModifier(Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.IOperationService,System.Guid)">
            <summary>
            Returns assignedModifier by id from the specified orderItemProduct or <c>null</c> if orderItemProduct doesn't exist or doesn't contain assignedModifier with that id.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.UI.Button">
            <summary>
            Button to register action for front plugin calling from plugin menu. <see cref="M:Resto.Front.Api.V3.IPluginIntegrationService.AddButton(Resto.Front.Api.V3.UI.Button)"/>
            </summary>
        </member>
        <member name="P:Resto.Front.Api.V3.UI.Button.Caption">
            <summary>
            Text to display on button in 'Additional screen' -> 'Plugins menu'." />
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IPluginIntegrationService.AddButton(Resto.Front.Api.V3.UI.Button)">
            <summary>
            Adds action button to display it in plugin menu. Button will be automatically removed on iikoFront restarts or you will dispose method's return value.
            </summary>
            <param name="button">
            Action Button to insert in plugins summary at 'Additional screen' -> 'Plugins menu'.
            </param>
            <returns>
            You may dispose result to remove button.
            </returns>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Brd.ReserveCancelReason">
            <summary>
            Reason why planned event failed.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Brd.ReserveCancelReason.ClientNotAppeared">
            <summary>
            Client didn't come timely.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Brd.ReserveCancelReason.ClientRefused">
            <summary>
            Client changed his mind.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Brd.ReserveCancelReason.Other">
            <summary>
            Any reason other than <see cref="F:Resto.Front.Api.V3.Data.Brd.ReserveCancelReason.ClientNotAppeared"/> and <see cref="F:Resto.Front.Api.V3.Data.Brd.ReserveCancelReason.ClientRefused"/>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Brd.ReserveStatus">
            <summary>Describes the status of a reserve or a banquet.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Brd.ReserveStatus.New">
            <summary>The reserve or banquet has been created. This means that corresponding tables are reserved for specified date in future.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Brd.ReserveStatus.Started">
            <summary>he banquet has been started. This means that event is active, so corresponding tables are occupied by guests.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Brd.ReserveStatus.Closed">
            <summary>The reserve or banquet has been closed. For reserve this means closing the reservation due to customer coming or customer cancellation. For banquet this means that event was either cancelled or successfully ended.</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus">
            <summary>Describes order item processing lifecycle from kitchen point of view.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Idle">
            <summary>Order item was printed, but cooking didn't start yet.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing1">
            <summary>Order item cooking was started, cooking is in first step progress.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing2">
            <summary>Order item cooking was started, cooking is in second step progress.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing3">
            <summary>Order item cooking was started, cooking is in third step progress.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing4">
            <summary>Order item cooking was started, cooking is in fourth step progress.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Processed">
            <summary>Order item cooking completed, dish is ready to be served.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Served">
            <summary>Order item was cooked and served.</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Orders.ProductsSellingPossibility">
            <summary>
            Member of <see cref="T:Resto.Front.Api.V3.Data.Orders.ProductsSellingRestrictions"/>, check result of <see cref="M:Resto.Front.Api.V3.IOperationService.CheckProductsSellingRestrictions(Resto.Front.Api.V3.Data.Security.ICredentials,System.Collections.Generic.Dictionary{Resto.Front.Api.V3.Data.Assortment.IProduct,System.Decimal})"/> method.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Orders.ProductsSellingPossibility.Allowed">
            <summary>
             Current user can sell specified amount of products without restriction.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Orders.ProductsSellingPossibility.AllowedForced">
            <summary>
            Selling of specified amount of products is restricted, but current user can sell them forcibly.
            Consider asking user for confirmation to sell products with negative remaining amount.
            Products with insufficient amount can be retrieved from <see cref="P:Resto.Front.Api.V3.Data.Orders.ProductsSellingRestrictions.ProductsExceedRemainingAmounts"/>.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Orders.ProductsSellingPossibility.Restricted">
            <summary>
            Selling of specified amount of products is restricted and current user hasn't permisstion to sell them forcibly.
            Products with insufficient amount can be retrieved from <see cref="P:Resto.Front.Api.V3.Data.Orders.ProductsSellingRestrictions.ProductsExceedRemainingAmounts"/>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Orders.OrderItemCourse">
            <summary>Describes the course (cooking and serving sequence) of an order item.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.Vip">
            <summary>Order item should be cooked and served as soon as possible, this is highest priority.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.First">
            <summary>Order item cooking should start immediately after service cheque printing, this is default priority.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.Second">
            <summary>Order item cooking should start after second course serve cheque printing, items of this priority should be served after <see cref="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.First"/>.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.Third">
            <summary>Order item cooking should start after third course serve cheque printing, items of this priority should be served after <see cref="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.Second"/>.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.Fourth">
            <summary>Order item cooking should start after fourth course serve cheque printing, this is lowest priority.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.Default">
            <summary>Order items has first course priority by default.</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Orders.OrderItemStatus">
            <summary>Describes the status of an order item.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Orders.OrderItemStatus.Added">
            <summary>Newly added item.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Orders.OrderItemStatus.PrintedNotCooking">
            <summary>Item was printed with low priority (<see cref="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.Second"/>, <see cref="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.Third"/>, <see cref="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.Fourth"/>) and corresponding course serve cheque wasn't printed yet.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Orders.OrderItemStatus.CookingStarted">
            <summary>Order item was printed with high or normal priority (<see cref="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.Vip"/>, <see cref="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.First"/>) or was printed with low priority and it's corresponding course serve cheque was also printed.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Orders.OrderItemStatus.CookingCompleted">
            <summary>Order item cooking completed, so it's ready to serve.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Orders.OrderItemStatus.Served">
            <summary>Order item is served.</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Orders.OrderStatus">
            <summary>Describes the status of an order.</summary>	
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Orders.OrderStatus.New">
            <summary>Newly created order. This status corresponds to lifetime from creation to ready-to-pay state.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Orders.OrderStatus.Bill">
            <summary>Bill cheque printed order. This status corresponds to lifetime between billing and payment.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Orders.OrderStatus.Closed">
            <summary>Paid order.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Orders.OrderStatus.Deleted">
            <summary>Deleted order.</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Orders.ProductsSellingRestrictions">
            <summary>
            Check result of <see cref="M:Resto.Front.Api.V3.IOperationService.CheckProductsSellingRestrictions(Resto.Front.Api.V3.Data.Security.ICredentials,System.Collections.Generic.Dictionary{Resto.Front.Api.V3.Data.Assortment.IProduct,System.Decimal})"/> method.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.ProductsSellingRestrictions.CheckResult">
            <summary>
            If current user can add these products with such amounts.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.ProductsSellingRestrictions.ProductsExceedRemainingAmounts">
            <summary>
            Products and amounts of products that can not be added to order.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Organization.DeliverySettingsServiceType">
            <summary>Available service types for delivery settings.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Organization.DeliverySettingsServiceType.CourierOnly">
            <summary>Delivered only with courier.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Organization.DeliverySettingsServiceType.SelfServiceOnly">
            <summary>Taken away only by customer.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Organization.DeliverySettingsServiceType.CourierAndSelfService">
            <summary>Both.</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Organization.OrderServiceType">
            <summary>
            Describes different servicing types.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Organization.OrderServiceType.Common">
            <summary>
            Regular order to be served on table or sold as a fastfood.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Organization.OrderServiceType.DeliveryByCourier">
            <summary>
            Delivery order to be delivered by courier.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.Organization.OrderServiceType.DeliveryByClient">
            <summary>
            Delivery order to be picked up by client itself.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.View.InputTypes">
            <summary>Input types.</summary>	
        </member>
        <member name="F:Resto.Front.Api.V3.Data.View.InputTypes.Card">
            <summary>To get card track. Window with card slide listener will be shown.</summary>
        </member>
        <member name="F:Resto.Front.Api.V3.Data.View.InputTypes.Number">
            <summary>To get number. Numpad window will be shown.</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.PaymentActionFailedException">
            <summary>
            Exception to notify that payment, cancel payment or return payment actions was not successful.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.PaymentActionFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.PaymentActionFailedException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.PaymentActionFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.PaymentActionFailedException"/> class with a specified error message.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.PaymentSystemRegistrationException">
            <summary>
            The exception that is thrown when a specified payment system was not registered.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.PaymentSystemRegistrationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.PaymentSystemRegistrationException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.PaymentSystemRegistrationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.PaymentSystemRegistrationException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.PaymentSystemRegistrationException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.PaymentSystemRegistrationException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.PaymentSystemRegistrationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.PaymentSystemRegistrationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.PluginIntegrationServiceExtensions.AddButton(Resto.Front.Api.V3.IPluginIntegrationService,System.String,System.Action{Resto.Front.Api.V3.IViewManager,Resto.Front.Api.V3.IReceiptPrinter})">
            <summary>
            Adds action button to display it in plugin menu. Button will be automatically removed on iikoFront restarts or you will dispose method's return value.
            </summary>
            <param name="service"></param>
            <param name="action">
            Action to execute on button pressed.
            </param>
            <param name="caption">
            Text to display on button in 'Additional screen' -&gt; 'Plugins menu'." 
            </param>
            <returns>
            You may dispose result to remove button.
            </returns>
            <seealso cref="M:Resto.Front.Api.V3.IPluginIntegrationService.AddButton(Resto.Front.Api.V3.UI.Button)"/>
        </member>
        <member name="T:Resto.Front.Api.V3.IExternalPaymentProcessor">
            <summary>
            Common interface for payment front plugin.
            Derive from <see cref="T:System.MarshalByRefObject"/> and implement this interface to make custom payment processor.
            Your implementation should be registered by <see cref="M:Resto.Front.Api.V3.IOperationService.RegisterPaymentSystem(Resto.Front.Api.V3.IExternalPaymentProcessor)"/>.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IExternalPaymentProcessor.Pay(System.Decimal,System.Nullable{System.Guid},System.Guid,Resto.Front.Api.V3.Data.Security.IUser,Resto.Front.Api.V3.IReceiptPrinter,Resto.Front.Api.V3.IViewManager,Resto.Front.Api.V3.IPaymentDataContext)">
            <summary>
            Perform payment operation.
            </summary>
            <param name="sum">Sum to pay.</param>
            <param name="orderId">Order Id.</param>
            <param name="transactionId">Transaction Id.</param>
            <param name="cashier">User handling payments and receipts.</param>
            <param name="printer"><see cref="T:Resto.Front.Api.V3.IReceiptPrinter"/> object to perform print actions. Should not be used after method returns.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.V3.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
            <param name="context"><see cref="T:Resto.Front.Api.V3.IPaymentDataContext"/> object to work with plugin saved data in iiko storage.</param>
            <exception cref="T:Resto.Front.Api.V3.Exceptions.PaymentActionFailedException">Exception to notify that payment actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.V3.IExternalPaymentProcessor.EmergencyCancelPayment(System.Decimal,System.Nullable{System.Guid},System.Guid,Resto.Front.Api.V3.Data.Security.IUser,Resto.Front.Api.V3.IReceiptPrinter,Resto.Front.Api.V3.IViewManager,Resto.Front.Api.V3.IPaymentDataContext)">
            <summary>
            Perform emergency cancel payment operation.
            </summary>
            <param name="sum">Sum to return.</param>
            <param name="orderId">Order Id.</param>
            <param name="transactionId">Transaction Id.</param>
            <param name="cashier">User handling payments and receipts.</param>
            <param name="printer"><see cref="T:Resto.Front.Api.V3.IReceiptPrinter"/> object to perform print actions. Should not be used after method returns.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.V3.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
            <param name="context"><see cref="T:Resto.Front.Api.V3.IPaymentDataContext"/> object to work with plugin saved data in iiko storage.</param>
            <exception cref="T:Resto.Front.Api.V3.Exceptions.PaymentActionFailedException">Exception to notify that cancel payment actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.V3.IExternalPaymentProcessor.ReturnPayment(System.Decimal,System.Nullable{System.Guid},System.Guid,Resto.Front.Api.V3.Data.Security.IUser,Resto.Front.Api.V3.IReceiptPrinter,Resto.Front.Api.V3.IViewManager,Resto.Front.Api.V3.IPaymentDataContext)">
            <summary>
            Perform return payment operation.
            </summary>
            <param name="sum">Sum to return.</param>
            <param name="orderId">Order Id.</param>
            <param name="transactionId">Transaction Id.</param>
            <param name="cashier">User handling payments and receipts.</param>
            <param name="printer"><see cref="T:Resto.Front.Api.V3.IReceiptPrinter"/> object to perform print actions. Should not be used after method returns.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.V3.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
            <param name="context"><see cref="T:Resto.Front.Api.V3.IPaymentDataContext"/> object to work with plugin saved data in iiko storage.</param>
            <exception cref="T:Resto.Front.Api.V3.Exceptions.PaymentActionFailedException">Exception to notify that return payment actions was not successful.</exception>
        </member>
        <member name="P:Resto.Front.Api.V3.IExternalPaymentProcessor.PaymentSystemKey">
            <summary>
            Key of the payment system, that should be registered as external.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.V3.IExternalPaymentProcessor.PaymentSystemName">
            <summary>
            Payment system title that will be displayed in BackOffice.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.DataTransferObjects.DeliverySmsNotificationSettings.TemplateForSumChange">
            <summary>Sms template for delivery order sum change notification.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.DataTransferObjects.DeliverySmsNotificationSettings.TemplateForChangeToUnconfirmedStatus">
            <summary>Sms template for delivery change to Unconfirmed status.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.DataTransferObjects.DeliverySmsNotificationSettings.TemplateForChangeToNewStatus">
            <summary>Sms template for delivery change to New status.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.DataTransferObjects.DeliverySmsNotificationSettings.TemplateForChangeToWaitingStatus">
            <summary>Sms template for delivery change to New status.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.DataTransferObjects.DeliverySmsNotificationSettings.TemplateForChangeToOnWayStatus">
            <summary>Sms template for delivery change to OnWay status.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.DataTransferObjects.DeliverySmsNotificationSettings.TemplateForChangeToDeliveredStatus">
            <summary>Sms template for delivery change to Delivered status.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.DataTransferObjects.DeliverySmsNotificationSettings.TemplateForChangeToClosedStatus">
            <summary>Sms template for delivery change to Closed status.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.DataTransferObjects.DeliverySmsNotificationSettings.TemplateForChangeToCancelledStatus">
            <summary>Sms template for delivery change to Cancelled status.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.DataTransferObjects.SmsSendingResultDto.IsError">
            <summary>Indicates if sms was sent successfully or not.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.DataTransferObjects.SmsSendingResultDto.ErrorText">
            <summary>Error text in case of unsuccessfully sending.</summary>	
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Cheques.ReceiptSlip">
            <summary>Slip to print on receipt-cheque printer.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Cheques.ReceiptSlip.Doc">
            <summary>Markup.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Cheques.BillCheque.OrderId">
            <summary>Order Id.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Cheques.BillCheque.BeforeHeader">
            <summary>Markup to add before header (at the very beginning of the cheque).</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Cheques.BillCheque.AfterHeader">
            <summary>Markup to add after header (including date, a name of the waiter and other) and before cheque data.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Cheques.BillCheque.BeforeFooter">
            <summary>Markup to add after cheque data (after result sums).</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Cheques.BillCheque.AfterFooter">
            <summary>Markup to add at the end of the cheque.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Cheques.CashRegisterCheque.OrderId">
            <summary>Order Id.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Cheques.CashRegisterCheque.BeforeCheque">
            <summary>Markup to add to the header (at the very beginning of the cheque).</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Cheques.CashRegisterCheque.AfterCheque">
            <summary>Markup to add at the end of the cheque.</summary>	
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Payments.CardPaymentItemAdditionalData">
            <summary>
            Additional information for card payment types. 
            </summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Payments.CardPaymentItemAdditionalData.CardNumber">
            <summary>
            Card number.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.CreateOrder(Resto.Front.Api.V3.Data.Organization.Sections.ITable)">
            <summary>Creates new order on specified table. User must have rights to create orders.</summary>
            <param name="table">Table on which order will be created. If table is null, then order will be created on the default table (depending on select iikoFront mode).</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.CreateDeliveryOrder(Resto.Front.Api.V3.Data.Organization.IOrderType)">
            <summary>Creates new delivery order on default table (depending on select iikoFront mode). User must have rights to edit deliveries. DeliveryOrder must be linked with Delivery (use <see cref="M:Resto.Front.Api.V3.Editors.IEditSession.CreateDelivery(System.Guid,System.Nullable{System.Int32},System.DateTime,System.String,Resto.Front.Api.V3.Data.DataTransferObjects.AddressDto,System.String,System.TimeSpan,System.DateTime,Resto.Front.Api.V3.Editors.IDeliveryOrderStub,Resto.Front.Api.V3.Editors.IClientStub,Resto.Front.Api.V3.Data.Security.IUser)"/>).</summary>
            <param name="type">Order type. Order service type should be DELIVERY_BY_COURIER or DELIVERY_PICKUP.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.SetOrderType(Resto.Front.Api.V3.Data.Organization.IOrderType,Resto.Front.Api.V3.Editors.IOrderStub)">
            <summary>Sets order type for existing order.</summary>
            <param name="type">Order type to set</param>
            <param name="order">Existing order</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.AddOrderGuest(System.String,Resto.Front.Api.V3.Editors.IOrderStub)">
            <summary>Adds new guest to existing order. User must have rights to edit orders.</summary>
            <param name="name">Name of the new guest. If name is null, then it will be generated automatically.</param>
            <param name="order">Existing order</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.AddOrderGuest(System.Guid,System.String,Resto.Front.Api.V3.Editors.IOrderStub)">
            <summary>Adds new guest with the given ID to existing order. User must have rights to edit orders.</summary>
            <param name="id">Unique identifier of the new guest in the order. MUST be unique not only for the order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="name">Name of the new guest. If name is null, then it will be generated automatically.</param>
            <param name="order">Existing order</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeEstimatedOrderGuestsCount(System.Int32,Resto.Front.Api.V3.Editors.IOrderStub)">
            <summary>Changes estimated order guests count. Use this method to set estimated guests count when guests collection doesn't reflect actual state of affairs.</summary>
            <param name="estimatedGuestsCount">How many people will be served using this order, in spite of how many guests this order will be splitted by.</param>
            <param name="order">Order to change estimated guests count.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.AddOrderItemProduct(System.Decimal,Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.Editors.IOrderStub,Resto.Front.Api.V3.Editors.IOrderItemGuestStub)">
            <summary>Adds assortment position to the guest in existing order. User must have rights to edit orders.</summary>
            <param name="amount">For positions with weight: weight in defined measure unit. For positions without weight: amount of the position. Can be from 0.001 to 999.999</param>
            <param name="product">Assortment position. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added</param>
            <param name="guest">Guest to which position will be added</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.AddOrderItemProduct(System.Guid,System.Decimal,Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.Editors.IOrderStub,Resto.Front.Api.V3.Editors.IOrderItemGuestStub)">
            <summary>Adds assortment position to the guest in existing order. User must have rights to edit orders.</summary>
            <param name="id">Unique identifier of the new item in the order. MUST be unique not only for the order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="amount">For positions with weight: weight in defined measure unit. For positions without weight: amount of the position. Can be from 0.001 to 999.999</param>
            <param name="product">Assortment position. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added</param>
            <param name="guest">Guest to which position will be added</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.AddOrderItemProduct(System.Guid,System.Decimal,Resto.Front.Api.V3.Data.Orders.OrderItemCourse,Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.Editors.IOrderStub,Resto.Front.Api.V3.Editors.IOrderItemGuestStub)">
            <summary>Adds assortment position to the guest in existing order. User must have rights to edit orders.</summary>
            <param name="id">Unique identifier of the new item in the order. MUST be unique not only for the order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="amount">For positions with weight: weight in defined measure unit. For positions without weight: amount of the position. Can be from 0.001 to 999.999</param>
            <param name="course">Cooking and serving priority of an order item.</param>
            <param name="product">Assortment position. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added</param>
            <param name="guest">Guest to which position will be added</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.AddOrderItemProduct(System.Decimal,Resto.Front.Api.V3.Data.Orders.OrderItemCourse,Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.Editors.IOrderStub,Resto.Front.Api.V3.Editors.IOrderItemGuestStub)">
            <summary>Adds assortment position with specific <see cref="T:Resto.Front.Api.V3.Data.Orders.OrderItemCourse"/> to the guest in existing order. User must have rights to edit orders.</summary>
            <param name="amount">For positions with weight: weight in defined measure unit. For positions without weight: amount of the position. Can be from 0.001 to 999.999</param>
            <param name="course">Cooking and serving priority of an order item.</param>
            <param name="product">Assortment position. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added</param>
            <param name="guest">Guest to which position will be added</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.AddOrderItemModifier(System.Int32,Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.Data.Assortment.IProductGroup,Resto.Front.Api.V3.Editors.IOrderStub,Resto.Front.Api.V3.Editors.IOrderItemProductStub)">
            <summary>Adds order item modifier to the order item in existing order. User must have rights to edit orders.</summary>
            <param name="amount">Amount of the modifier. Can be from 1 to 999.</param>
            <param name="modifier">Assortment position for modifier. Must be accessible through IOrderItemProduct.AvailableSimpleModifiers collection or one of the IOrderItemProduct.AvailableGroupModifiers child collections.</param>
            <param name="parentGroup">Assortment position group for modifier. Must be specified if new modifier will be part of the group modifier. Otherwise null. Group modifier must be chosen from IOrderItemProduct.AvailableGroupModifiers</param>
            <param name="order">Order to which modifier will be added</param>
            <param name="orderItemProduct">Order item to which modifier will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.AddOrderItemModifier(System.Guid,System.Int32,Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.Data.Assortment.IProductGroup,Resto.Front.Api.V3.Editors.IOrderStub,Resto.Front.Api.V3.Editors.IOrderItemProductStub)">
            <summary>Adds order item modifier to the order item in existing order. User must have rights to edit orders.</summary>
            <param name="id">Unique identifier of the new order item modifier. MUST be unique not only for the order item or order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="amount">Amount of the modifier. Can be from 1 to 999.</param>
            <param name="modifier">Assortment position for modifier. Must be accessible through IOrderItemProduct.AvailableSimpleModifiers collection or one of the IOrderItemProduct.AvailableGroupModifiers child collections.</param>
            <param name="parentGroup">Assortment position group for modifier. Must be specified if new modifier will be part of the group modifier. Otherwise null. Group modifier must be chosen from IOrderItemProduct.AvailableGroupModifiers</param>
            <param name="order">Order to which modifier will be added</param>
            <param name="orderItemProduct">Order item to which modifier will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeOrderItemProductAmount(System.Decimal,Resto.Front.Api.V3.Editors.IExistingOrderItemProductStub)">
            <summary>Changes the amount of the assortment position in existing order. User must have rights to edit orders.</summary>
            <param name="amount">For positions with weight: new weight in defined measure unit. For positions without weight: new amount of the position. Can be from 0.001 to 999.999</param>
            <param name="orderItemProduct">Order item that represents the assortment position and which amount will be changed.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeOrderItemProductCourse(Resto.Front.Api.V3.Data.Orders.OrderItemCourse,Resto.Front.Api.V3.Editors.IExistingOrderItemProductStub)">
            <summary>Changes the course of the order item.</summary>
            <param name="course">New course for order item.</param>
            <param name="orderItemProduct">Order item which course will be changed.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.MoveOrderItemProduct(Resto.Front.Api.V3.Editors.IExistingOrderItemProductStub,Resto.Front.Api.V3.Editors.IOrderItemGuestStub)">
            <summary>Moves product item between guests of the same order.</summary>
            <param name="product">Product item to be moved.</param>
            <param name="destinationGuest">Guest the product item will be assigned to.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeOrderItemModifierAmount(System.Int32,Resto.Front.Api.V3.Editors.IOrderStub,Resto.Front.Api.V3.Editors.IOrderItemProductStub,Resto.Front.Api.V3.Editors.IOrderItemModifierStub)">
            <summary>Changes the amount of the order item modifier. User must have rights to edit orders.</summary>
            <param name="amount">New amount of the modifier. Can be from 1 to 999.</param>
            <param name="order">Order that contains element with changing modifier.</param>
            <param name="orderItemProduct">Order item with changing modifier.</param>
            <param name="orderItemModifier">Modifier which amount will be changed.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ServeOrderItemProduct(Resto.Front.Api.V3.Editors.IOrderItemProductStub,Resto.Front.Api.V3.Editors.IOrderStub)">
            <summary>Mark order item product as served.</summary>
            <param name="orderItemProduct">Order item product to mark as served. This item should be printed, but not served yet.</param>
            <param name="order">Order which product will be served.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.UnserveOrderItemProduct(Resto.Front.Api.V3.Editors.IOrderItemProductStub,Resto.Front.Api.V3.Editors.IOrderStub)">
            <summary>Mark order item product as unserved.</summary>
            <param name="orderItemProduct">Order item product to mark as unserved. This item should be served.</param>
            <param name="order">Order which product will be unserved.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.DeleteOrderGuest(Resto.Front.Api.V3.Editors.IOrderStub,Resto.Front.Api.V3.Editors.IOrderItemGuestStub)">
            <summary>Deletes guest without any products from order.</summary>
            <param name="order">Order to delete guest from.</param>
            <param name="guest">Guest to be deleted.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.RenameOrderGuest(System.Guid,System.String,Resto.Front.Api.V3.Editors.IOrderStub)">
            <summary>Renames order's guest.</summary>
            <param name="id">Unique identifier of the guest to be renamed.</param>
            <param name="newName">New name of the guest.</param>
            <param name="order">Order to rename guest in.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.DeleteOrderItemProduct(Resto.Front.Api.V3.Editors.IOrderStub,Resto.Front.Api.V3.Editors.IOrderItemProductStub)">
            <summary>Deletes order item from order that represents the assortment position. User must have rights to edit orders.</summary>
            <param name="order">Order that contains the item to be deleted.</param>
            <param name="orderItemProduct">Order item to be deleted. Item must not be printed.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.DeleteOrderItemModifier(Resto.Front.Api.V3.Editors.IOrderStub,Resto.Front.Api.V3.Editors.IOrderItemProductStub,Resto.Front.Api.V3.Editors.IOrderItemModifierStub)">
            <summary>Deletes order item modifier from order item that represents the assortment position. User must have rights to edit orders.</summary>
            <param name="order">Order that contains the item to be removed. Item must not be printed.</param>
            <param name="orderItemProduct">Order item that contains the modifier to be removed.</param>
            <param name="orderItemModifier">Modifier to be removed.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.DeletePrintedOrderItemProduct(System.String,Resto.Front.Api.V3.Data.Orders.IRemovalType,Resto.Front.Api.V3.Editors.IOrderStub,Resto.Front.Api.V3.Editors.IOrderItemProductStub)">
            <summary>Deletes order item that is already printed. User must have rights to edit orders.</summary>
            <param name="comment">Comment to the charge-off. Max length - 255 chars.</param>
            <param name="removalType">Object that describes how item should be charged-off.</param>
            <param name="order">Order that contains the item to be removed.</param>
            <param name="orderItemProduct">Order item to be removed. Item must be printed.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.DeletePrintedOrderItemModifier(System.String,Resto.Front.Api.V3.Data.Orders.IRemovalType,Resto.Front.Api.V3.Editors.IOrderStub,Resto.Front.Api.V3.Editors.IOrderItemProductStub,Resto.Front.Api.V3.Editors.IOrderItemModifierStub)">
            <summary>Deletes order item modifier that is already printed. User must have rights to edit orders.</summary>
            <param name="comment">Comment to the charge-off. Max length - 255 chars.</param>
            <param name="removalType">Object that describes how item should be charged-off.</param>
            <param name="order">Order that contains the item to be removed. Item must not be printed.</param>
            <param name="orderItemProduct">Order item that contains the modifier to be removed.Item must be printed.</param>
            <param name="orderItemModifier">Order item modifier to be removed. Modifier must be printed.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeOrderItemComment(System.String,Resto.Front.Api.V3.Editors.IOrderStub,Resto.Front.Api.V3.Editors.IOrderItemProductStub)">
            <summary>Changes product order item's comment.</summary>
            <param name="comment">New comment for product order item.</param>
            <param name="order">Order that contains product order item which comment will be changed.</param>
            <param name="orderItemProduct">Product order item which comment will be changed. Product order item should not been printed.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.DeleteOrderItemComment(Resto.Front.Api.V3.Editors.IOrderStub,Resto.Front.Api.V3.Editors.IOrderItemProductStub)">
            <summary>Deletes product order item's comment.</summary>
            <param name="order">Order that contains product order item which comment will be changed.</param>
            <param name="orderItemProduct">Product order item which comment will be changed. Product order item should not been printed.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.AddDiscount(Resto.Front.Api.V3.Data.Orders.IDiscountType,Resto.Front.Api.V3.Editors.IOrderStub)">
            <summary>Adds simple discount of known type to existing order. User must have rights to work with discounts.</summary>
            <param name="discount">Type of the discount</param>
            <param name="order"></param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.AddDiscountByCardNumber(System.String,Resto.Front.Api.V3.Editors.IOrderStub,Resto.Front.Api.V3.Data.Orders.IDiscountCard)">
            <summary>Add discount by card number</summary>
            <param name="cardNumber">Number of iiko discount card.</param>
            <param name="order">Order where discount will be applied</param>
            <param name="discountCard">Iiko discount card data.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.DeleteDiscount(Resto.Front.Api.V3.Data.Orders.IDiscountItem,Resto.Front.Api.V3.Editors.IOrderStub)">
            <summary>Removes discount of known type to existing order. User must have rights to work with discounts.</summary>
            <param name="discountItem">Discount to be removed.</param>
            <param name="order"></param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.AddPaymentItem(System.Decimal,System.Object,Resto.Front.Api.V3.Data.Payments.IPaymentType,Resto.Front.Api.V3.Editors.IOrderStub)">
            <summary>Add new payment item to order.</summary>
            <param name="paymentSum">Sum of payment item that will be added.</param>
            <param name="additionalData">Payment type specific additional data.</param>
            <param name="paymentType">Type of payment item that will be added.</param>
            <param name="order">Order to which payment item will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.AddExternalPaymentItem(System.Decimal,System.Boolean,System.Object,Resto.Front.Api.V3.Data.Payments.IPaymentType,Resto.Front.Api.V3.Editors.IOrderStub)">
            <summary>Add new external payment item to order.</summary>
            <param name="paymentSum">Sum of payment item that will be added.</param>
            <param name="isProcessed">Whether payment item was already processed by some external system.</param>
            <param name="additionalData">Payment type specific additional data.</param>
            <param name="paymentType">Type of payment item that will be added. It should be allowed to create external payment items of this type.</param>
            <param name="order">Order to which payment item will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.DeletePaymentItem(Resto.Front.Api.V3.Editors.IPaymentItemStub,Resto.Front.Api.V3.Editors.IOrderStub)">
            <summary>Delete existing payment item from order.</summary>
            <param name="paymentItem">Payment item to be deleted.</param>
            <param name="order">Order from which payment item will be deleted.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.DeleteExternalPaymentItem(Resto.Front.Api.V3.Editors.IPaymentItemStub,Resto.Front.Api.V3.Editors.IOrderStub)">
            <summary>Delete existing external payment item from order.</summary>
            <param name="paymentItem">External payment item to be deleted.</param>
            <param name="order">Order from which payment item will be deleted.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.CreateStreet(System.Guid,System.String,Resto.Front.Api.V3.Data.Brd.ICity)">
            <summary>Creates new street.</summary>
            <param name="id">Id of creating street</param>
            <param name="name">Name of creating street</param>
            <param name="city">City of creating street</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.CreateStreet(System.String)">
            <summary>Creates new street.</summary>
            <param name="name">Name of creating street</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeStreetName(System.String,Resto.Front.Api.V3.Editors.IStreetStub)">
            <summary>Changes street's name</summary>
            <param name="name">Name of street</param>
            <param name="street">Changing street</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.DeleteOrRestoreStreet(System.Boolean,Resto.Front.Api.V3.Editors.IStreetStub)">
            <summary>Deletes street</summary>
            <param name="delete">Delete or restore street flag. true - to delete, false - to restore.</param>
            <param name="street">Changing street</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.CreateClient(System.Guid,System.String,System.Collections.Generic.List{Resto.Front.Api.V3.Data.DataTransferObjects.PhoneDto},System.DateTime)">
            <summary>Creates new client. After invoke of this action you need set necessary properties such as Name.</summary>
            <param name="id">Id of creating client</param>
            <param name="name">Name of client</param>
            <param name="phones">List of client phones. This list should contain at least one phone. Cannot contain null values and more than one main phone (i.e. with property IsMain = true)</param>
            <param name="dateCreated">Date when client was created.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.CreateClient(System.Guid,System.String,System.Collections.Generic.List{Resto.Front.Api.V3.Data.DataTransferObjects.PhoneDto})">
            <summary>Creates new client without date created. Date created should be not null for relevant OLAP reports (call <see cref="M:Resto.Front.Api.V3.Editors.IEditSession.CreateClient(System.Guid,System.String,System.Collections.Generic.List{Resto.Front.Api.V3.Data.DataTransferObjects.PhoneDto},System.DateTime)"/>). After invoke of this action you need set necessary properties such as Name. </summary>
            <param name="id">Id of creating client</param>
            <param name="name">Name of client</param>
            <param name="phones">List of client phones. This list should contain at least one phone. Cannot contain null values and more than one main phone (i.e. with property IsMain = true)</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeClientName(System.String,Resto.Front.Api.V3.Editors.IClientStub)">
            <summary>Changes client name</summary>
            <param name="name">new name of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeClientSurname(System.String,Resto.Front.Api.V3.Editors.IClientStub)">
            <summary>Changes client surname</summary>
            <param name="surname">new surname of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeClientNick(System.String,Resto.Front.Api.V3.Editors.IClientStub)">
            <summary>Changes client nickname</summary>
            <param name="nick">new nick of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeClientCardNumber(System.String,Resto.Front.Api.V3.Editors.IClientStub)">
            <summary>Changes client card number</summary>
            <param name="cardNumber">new card number of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeClientComment(System.String,Resto.Front.Api.V3.Editors.IClientStub)">
            <summary>Changes client comment</summary>
            <param name="comment">new name of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeClientPhones(System.Collections.Generic.List{Resto.Front.Api.V3.Data.DataTransferObjects.PhoneDto},Resto.Front.Api.V3.Editors.IClientStub)">
            <summary>Changes client phones list</summary>
            <param name="phones">new phones list of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeClientEmails(System.Collections.Generic.List{Resto.Front.Api.V3.Data.DataTransferObjects.EmailDto},Resto.Front.Api.V3.Editors.IClientStub)">
            <summary>Changes client emails list</summary>
            <param name="emails">new emails list of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeClientAddresses(System.Collections.Generic.List{Resto.Front.Api.V3.Data.DataTransferObjects.AddressDto},System.Nullable{System.Int32},Resto.Front.Api.V3.Editors.IClientStub)">
            <summary>Changes client addresses.</summary>
            <param name="addresses">new addresses list of client</param>
            <param name="mainAddressIndex">index of client main address</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeClientMainAddressIndex(System.Nullable{System.Int32},Resto.Front.Api.V3.Editors.IClientStub)">
            <summary>Changes client main address index</summary>
            <param name="mainAddressIndex">index of client main address</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeClientBlacklistInfo(System.Boolean,System.String,Resto.Front.Api.V3.Editors.IClientStub)">
            <summary>Changes client blacklist info</summary>
            <param name="isInBlacklist">Is changing client in blacklist.</param>
            <param name="reason">The reason of adding client to blacklist.</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeClientIikoNetId(System.Guid,Resto.Front.Api.V3.Editors.IClientStub)">
            <summary>Changes client's account in Plazius</summary>
            <param name="iikonetId">New account in Plazius</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.CreateDelivery(System.Guid,System.Nullable{System.Int32},System.DateTime,System.String,Resto.Front.Api.V3.Data.DataTransferObjects.AddressDto,System.String,System.TimeSpan,System.DateTime,Resto.Front.Api.V3.Editors.IDeliveryOrderStub,Resto.Front.Api.V3.Editors.IClientStub,Resto.Front.Api.V3.Data.Security.IUser)">
            <summary>Creates new delivery. Specify address for courier-service; leave it null for self-service.</summary>
            <param name="id">Id of new delivery</param>
            <param name="number">Delivery number</param>
            <param name="creationTime">Creation time of delivery. Cannot be greater than current time at the moment of processing action at front.</param>
            <param name="phone">Contact phone of client for current delivery.</param>
            <param name="address">Address where order should be delivered for courier-service or null for self-service.</param>
            <param name="sourceKey">Source of delivery (for example, some web site, call center)</param>
            <param name="duration">Calculated delivery duration (accurate within minutes).</param>
            <param name="expectedDeliverTime">Time when client wants delivery to be delivered.</param>
            <param name="deliveryOrder">Delivery order stub</param>
            <param name="client">Delivery client</param>
            <param name="deliveryOperator">User who creates delivery.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeDeliveryProblemStatus(System.Boolean,Resto.Front.Api.V3.Editors.IDeliveryStub)">
            <summary>Change delivery problem status</summary>
            <param name="hasProblem">Problem flag</param>
            <param name="delivery">Delivery to change</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeDeliveryProblemComment(System.String,Resto.Front.Api.V3.Editors.IDeliveryStub)">
            <summary>Change delivery problem comment</summary>
            <param name="comment">Problem comment. MaxLength = 1000 symbols. If HasProblem = false it does not mean that ProblemComment = null, because comment isn't erased automatically after set HasProblem to false.</param>
            <param name="delivery">Delivery to change</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeDeliveryPhone(System.String,Resto.Front.Api.V3.Editors.IDeliveryStub)">
            <summary>Changes delivery phone</summary>
            <param name="phone">New phone value of delivery</param>
            <param name="delivery">Delivery to change phone</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeDeliveryEmail(System.String,Resto.Front.Api.V3.Editors.IDeliveryStub)">
            <summary>Change delivery e-mail</summary>
            <param name="email">E-mail</param>
            <param name="delivery">Delivery to change</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeDeliveryComment(System.String,Resto.Front.Api.V3.Editors.IDeliveryStub)">
            <summary>Change delivery comment</summary>
            <param name="comment">Comment</param>
            <param name="delivery">Delivery to change</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeDeliveryExpectedDeliverTime(System.DateTime,Resto.Front.Api.V3.Editors.IDeliveryStub)">
            <summary>Change time when client want delivery to be delivered</summary>
            <param name="expectedDeliverTime">Expected deliver time</param>
            <param name="delivery">Delivery to change</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeDeliveryAddress(Resto.Front.Api.V3.Data.DataTransferObjects.AddressDto,Resto.Front.Api.V3.Editors.IDeliveryStub)">
            <summary>Changes address of delivery</summary>
            <param name="address">New address of delivery</param>
            <param name="delivery">Delivery to change address</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeDeliveryCourier(System.Boolean,Resto.Front.Api.V3.Editors.IDeliveryStub,Resto.Front.Api.V3.Data.Security.IUser)">
            <summary>Assign/Change delivery courier. Can use this action only before delivery is to be delivered.</summary>
            <param name="isCourierSelectedManually">Is courier selected manually and can't be replaced with automatic logistic system</param>
            <param name="delivery">Delivery to assign courier.</param>
            <param name="courier">Courier to assign to delivery.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.SetDeliveryConfirmed(Resto.Front.Api.V3.Editors.IDeliveryStub)">
            <summary>Change delivery status to confirmed.</summary>
            <param name="delivery">Delivery to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeDeliveryConfirmTime(System.Nullable{System.DateTime},Resto.Front.Api.V3.Editors.IDeliveryStub)">
            <summary>Change delivery when delivery was confirmed.</summary>
            <param name="confirmTime">Confirmation time</param>
            <param name="delivery">Delivery to change time.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.SetDeliveryUnconfirmed(Resto.Front.Api.V3.Editors.IDeliveryStub)">
            <summary>Change delivery status to unconfirmed.</summary>
            <param name="delivery">Delivery to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.SetDeliveryUndelivered(Resto.Front.Api.V3.Editors.IDeliveryStub)">
            <summary>Change delivery status to OnWay from status delivered.</summary>
            <param name="delivery">Delivery to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.SetDeliveryDelivered(Resto.Front.Api.V3.Editors.IDeliveryStub)">
            <summary>Change delivery status to delivered.</summary>
            <param name="delivery">Delivery to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeDeliveryActualDeliverTime(System.Nullable{System.DateTime},Resto.Front.Api.V3.Editors.IDeliveryStub)">
            <summary>Change time when delivery was actually delivered.</summary>
            <param name="actualDeliverTime">Actual deliver time</param>
            <param name="delivery">Delivery to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeDeliveryDuration(System.Nullable{System.TimeSpan},Resto.Front.Api.V3.Editors.IDeliveryStub)">
            <summary>Change duration of delivery processing</summary>
            <param name="duration">Calculated delivery duration (accurate within minutes).</param>
            <param name="delivery">Change precalculated delivery duration.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeDeliveryOperator(Resto.Front.Api.V3.Editors.IDeliveryStub,Resto.Front.Api.V3.Data.Security.IUser)">
            <summary>Assign/Change delivery operator.</summary>
            <param name="delivery">Delivery to assign operator.</param>
            <param name="deliveryOperator">Operator to assign to delivery.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeDeliverySplitBetweenPersons(System.Boolean,Resto.Front.Api.V3.Editors.IDeliveryStub)">
            <summary>Changes delivery property if order should be split between persons</summary>
            <param name="splitBetweenPersons">Delivery property if order should be split between persons</param>
            <param name="delivery">Delivery to change</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeDeliveryPersonsCount(System.Int32,Resto.Front.Api.V3.Editors.IDeliveryStub)">
            <summary>Changes persons count for a delivery</summary>
            <param name="personsCount">Delivery persons count</param>
            <param name="delivery">Delivery to change</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeDeliveryMarketingSource(Resto.Front.Api.V3.Editors.IDeliveryStub,Resto.Front.Api.V3.Data.Brd.IMarketingSource)">
            <summary>Assign/Change delivery marketing source.</summary>
            <param name="delivery">Delivery to assign marketing source.</param>
            <param name="marketingSource">Source of delivery.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeDeliveryLocation(System.Nullable{System.Double},System.Nullable{System.Double},Resto.Front.Api.V3.Editors.IDeliveryStub)">
            <summary>Change delivery address location.</summary>
            <param name="latitude">Latitude of geolocation of delivery address.</param>
            <param name="longitude">Longitude of geolocation of delivery address.</param>
            <param name="delivery">Delivery to change marketing source.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.CreateReserve(System.DateTime,Resto.Front.Api.V3.Editors.IClientStub,Resto.Front.Api.V3.Data.Organization.Sections.ITable)">
            <summary>Creates reservation for planned visit in future. Table will be marked as reserved to prevent collision with other guests at the same time.</summary>
            <param name="estimatedStartTime">Approximate date and time of planned visit, used to divide different visits and remind staff to prepare table.</param>
            <param name="client">Client who asked to reserve table for him.</param>
            <param name="table">Specifies table to be reserved at some moment in future.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.CreateBanquet(System.DateTime,Resto.Front.Api.V3.Editors.IClientStub,Resto.Front.Api.V3.Data.Organization.Sections.ITable)">
            <summary>Creates reservation for planned event in future. Table will be marked as reserved to prevent collision with other events at the same time.</summary>
            <param name="estimatedStartTime">Approximate date and time of planned event, used to divide different events and remind staff to prepare table and ingredients.</param>
            <param name="client">Client who asked to reserve table for his event.</param>
            <param name="table">Specifies table to be reserved at some moment in future.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.CreateBanquet(System.DateTime,Resto.Front.Api.V3.Editors.IClientStub,Resto.Front.Api.V3.Editors.IOrderStub)">
            <summary>Creates reservation for planned event in future. Order's table will be marked as reserved to prevent collision with other events at the same time.</summary>
            <param name="estimatedStartTime">Approximate date and time of planned event, used to divide different events and remind staff to prepare table and ingredients.</param>
            <param name="client">Client who asked to reserve table for his event.</param>
            <param name="order">Order used to form menu for coming event, specify serve sequence (via courses), prepay.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeReserveComment(System.String,Resto.Front.Api.V3.Editors.IReserveStub)">
            <summary>Changes reserve comment. Use empty string to clear comment.</summary>
            <param name="comment">Arbitrary string comment for the reserve, maximum length is 250 chars.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeReserveDuration(System.TimeSpan,Resto.Front.Api.V3.Editors.IReserveStub)">
            <summary>Changes estimated reserve duration (amount of time betwen visit's start and end). Default reserve duration is 2 hours, banquet duration is 3 hours.</summary>
            <param name="duration">Reserve duration, minimum value is 15 minutes, maximum value is 23 hours and 59 minutes, maximum precision is 1 minute (so 1h 25m 42s is invalid as too precise value).</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeReserveEstimatedStartTime(System.DateTime,Resto.Front.Api.V3.Editors.IReserveStub)">
            <summary>Changes estimated reserve start time.</summary>
            <param name="estimatedStartTime">Approximate date and time of planned visit, used to divide different visits and remind staff to prepare table.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeReserveGuestsCount(System.Int32,Resto.Front.Api.V3.Editors.IReserveStub)">
            <summary>Changes estimated guests count for reserve. Default value is 2.</summary>
            <param name="guestsCount">Estimated guests count, minimum value is 1, maximum value is 1000.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeReserveTable(Resto.Front.Api.V3.Data.Organization.Sections.ITable,Resto.Front.Api.V3.Editors.IReserveStub)">
            <summary>Changes reserving table.</summary>
            <param name="table">Specifies table to be reserved at some moment in future.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeReserveReminder(System.Boolean,Resto.Front.Api.V3.Editors.IReserveStub)">
            <summary>Changes reserve reminder flag.</summary>
            <param name="shouldRemind">Whether to remind staff to prepare table beforehand.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.BindReserveToOrder(Resto.Front.Api.V3.Editors.IReserveStub,Resto.Front.Api.V3.Editors.IOrderStub)">
            <summary>Converts exising reserve or banquet without order to banquet with order.</summary>
            <param name="reserve">Reserve to bind.</param>
            <param name="order">Order used to bind reserve to.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ActivateReserve(Resto.Front.Api.V3.Editors.IReserveStub)">
            <summary>Closes reserve and creates order on reserved table.</summary>
            <param name="reserve">Reserve to activate.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ReopenReserve(Resto.Front.Api.V3.Editors.IReserveStub)">
            <summary>Reopens previously closed or canceled reserve.</summary>
            <param name="reserve">Reserve to reopen.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.RecoverCorruptedReserve(Resto.Front.Api.V3.Editors.IReserveStub)">
            <summary>Recovers banquet which is bound to non-existent order. Normally such cases should never occur, but due to entities storage implementation details sometimes banquet may loose its order. Note that new empty order will be created from scratch.</summary>
            <param name="reserve">Banquet to recover.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.StartBanquet(Resto.Front.Api.V3.Editors.IExistingReserveStub,Resto.Front.Api.V3.Data.Security.IUser)">
            <summary>Transits banquet to the started status.</summary>
            <param name="reserve">Banquet to start. Banquet must have an order binding, otherwise call <see cref="M:Resto.Front.Api.V3.Editors.IEditSession.BindReserveToOrder(Resto.Front.Api.V3.Editors.IReserveStub,Resto.Front.Api.V3.Editors.IOrderStub)"/> first.</param>
            <param name="waiter">Waiter who will serve the banquet.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.ChangeOrderOriginName(System.String,Resto.Front.Api.V3.Editors.IOrderStub)">
            <summary>Sets order origin — name of the source this order was received from. Specifying origin allows to analyse efficiency of external order sources such as different web-sites, mobile applications and so on. Origin name can be set only once.</summary>
            <param name="originName">Non-empty string of the new origin name. Maximum length is 20 chars.</param>
            <param name="order">Order to specify origin.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Editors.IEditSession.MoveOrderItemProductToAnotherOrder(Resto.Front.Api.V3.Editors.IExistingOrderItemProductStub,Resto.Front.Api.V3.Editors.IOrderItemGuestStub,Resto.Front.Api.V3.Editors.IOrderStub)">
            <summary>Moves product item between orders.</summary>
            <param name="product">Product item to be moved.</param>
            <param name="destinationGuest">Guest the product item will be assigned to.</param>
            <param name="destinationOrder">Order to move to.</param>
        </member>
        <member name="T:Resto.Front.Api.V3.Extensions.OperationServiceExtensions">
            <summary>
            Provides a set of static methods for executing operations.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.SetOrderType(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Organization.IOrderType,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Sets order type for existing order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="type">Order type to set</param>
            <param name="order">Existing order</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.AddOrderGuest(Resto.Front.Api.V3.IOperationService,System.String,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Adds new guest to existing order. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="name">Name of the new guest. If name is null, then it will be generated automatically.</param>
            <param name="order">Existing order</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.AddOrderGuest(Resto.Front.Api.V3.IOperationService,System.Guid,System.String,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Adds new guest with the given ID to existing order. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Unique identifier of the new guest in the order. MUST be unique not only for the order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="name">Name of the new guest. If name is null, then it will be generated automatically.</param>
            <param name="order">Existing order</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeEstimatedOrderGuestsCount(Resto.Front.Api.V3.IOperationService,System.Int32,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes estimated order guests count. Use this method to set estimated guests count when guests collection doesn't reflect actual state of affairs.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="estimatedGuestsCount">How many people will be served using this order, in spite of how many guests this order will be splitted by.</param>
            <param name="order">Order to change estimated guests count.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.AddOrderItemProduct(Resto.Front.Api.V3.IOperationService,System.Decimal,Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Orders.IOrderItemGuest,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Adds assortment position to the guest in existing order. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="amount">For positions with weight: weight in defined measure unit. For positions without weight: amount of the position. Can be from 0.001 to 999.999</param>
            <param name="product">Assortment position. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added</param>
            <param name="guest">Guest to which position will be added</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.AddOrderItemProduct(Resto.Front.Api.V3.IOperationService,System.Guid,System.Decimal,Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Orders.IOrderItemGuest,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Adds assortment position to the guest in existing order. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Unique identifier of the new item in the order. MUST be unique not only for the order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="amount">For positions with weight: weight in defined measure unit. For positions without weight: amount of the position. Can be from 0.001 to 999.999</param>
            <param name="product">Assortment position. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added</param>
            <param name="guest">Guest to which position will be added</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.AddOrderItemProduct(Resto.Front.Api.V3.IOperationService,System.Guid,System.Decimal,Resto.Front.Api.V3.Data.Orders.OrderItemCourse,Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Orders.IOrderItemGuest,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Adds assortment position to the guest in existing order. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Unique identifier of the new item in the order. MUST be unique not only for the order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="amount">For positions with weight: weight in defined measure unit. For positions without weight: amount of the position. Can be from 0.001 to 999.999</param>
            <param name="course">Cooking and serving priority of an order item.</param>
            <param name="product">Assortment position. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added</param>
            <param name="guest">Guest to which position will be added</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.AddOrderItemProduct(Resto.Front.Api.V3.IOperationService,System.Decimal,Resto.Front.Api.V3.Data.Orders.OrderItemCourse,Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Orders.IOrderItemGuest,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Adds assortment position with specific <see cref="T:Resto.Front.Api.V3.Data.Orders.OrderItemCourse"/> to the guest in existing order. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="amount">For positions with weight: weight in defined measure unit. For positions without weight: amount of the position. Can be from 0.001 to 999.999</param>
            <param name="course">Cooking and serving priority of an order item.</param>
            <param name="product">Assortment position. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added</param>
            <param name="guest">Guest to which position will be added</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.AddOrderItemModifier(Resto.Front.Api.V3.IOperationService,System.Int32,Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.Data.Assortment.IProductGroup,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Adds order item modifier to the order item in existing order. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="amount">Amount of the modifier. Can be from 1 to 999.</param>
            <param name="modifier">Assortment position for modifier. Must be accessible through IOrderItemProduct.AvailableSimpleModifiers collection or one of the IOrderItemProduct.AvailableGroupModifiers child collections.</param>
            <param name="parentGroup">Assortment position group for modifier. Must be specified if new modifier will be part of the group modifier. Otherwise null. Group modifier must be chosen from IOrderItemProduct.AvailableGroupModifiers</param>
            <param name="order">Order to which modifier will be added</param>
            <param name="orderItemProduct">Order item to which modifier will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.AddOrderItemModifier(Resto.Front.Api.V3.IOperationService,System.Guid,System.Int32,Resto.Front.Api.V3.Data.Assortment.IProduct,Resto.Front.Api.V3.Data.Assortment.IProductGroup,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Adds order item modifier to the order item in existing order. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Unique identifier of the new order item modifier. MUST be unique not only for the order item or order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="amount">Amount of the modifier. Can be from 1 to 999.</param>
            <param name="modifier">Assortment position for modifier. Must be accessible through IOrderItemProduct.AvailableSimpleModifiers collection or one of the IOrderItemProduct.AvailableGroupModifiers child collections.</param>
            <param name="parentGroup">Assortment position group for modifier. Must be specified if new modifier will be part of the group modifier. Otherwise null. Group modifier must be chosen from IOrderItemProduct.AvailableGroupModifiers</param>
            <param name="order">Order to which modifier will be added</param>
            <param name="orderItemProduct">Order item to which modifier will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeOrderItemProductAmount(Resto.Front.Api.V3.IOperationService,System.Decimal,Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes the amount of the assortment position in existing order. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="amount">For positions with weight: new weight in defined measure unit. For positions without weight: new amount of the position. Can be from 0.001 to 999.999</param>
            <param name="orderItemProduct">Order item that represents the assortment position and which amount will be changed.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeOrderItemProductCourse(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Orders.OrderItemCourse,Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes the course of the order item.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="course">New course for order item.</param>
            <param name="orderItemProduct">Order item which course will be changed.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.MoveOrderItemProduct(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.Data.Orders.IOrderItemGuest,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Moves product item between guests of the same order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="product">Product item to be moved.</param>
            <param name="destinationGuest">Guest the product item will be assigned to.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeOrderItemModifierAmount(Resto.Front.Api.V3.IOperationService,System.Int32,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.Data.Orders.IOrderItemModifier,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes the amount of the order item modifier. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="amount">New amount of the modifier. Can be from 1 to 999.</param>
            <param name="order">Order that contains element with changing modifier.</param>
            <param name="orderItemProduct">Order item with changing modifier.</param>
            <param name="orderItemModifier">Modifier which amount will be changed.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ServeOrderItemProduct(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Mark order item product as served.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="orderItemProduct">Order item product to mark as served. This item should be printed, but not served yet.</param>
            <param name="order">Order which product will be served.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.UnserveOrderItemProduct(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Mark order item product as unserved.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="orderItemProduct">Order item product to mark as unserved. This item should be served.</param>
            <param name="order">Order which product will be unserved.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.DeleteOrderGuest(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Orders.IOrderItemGuest,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Deletes guest without any products from order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order to delete guest from.</param>
            <param name="guest">Guest to be deleted.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.RenameOrderGuest(Resto.Front.Api.V3.IOperationService,System.Guid,System.String,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Renames order's guest.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Unique identifier of the guest to be renamed.</param>
            <param name="newName">New name of the guest.</param>
            <param name="order">Order to rename guest in.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.DeleteOrderItemProduct(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Deletes order item from order that represents the assortment position. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order that contains the item to be deleted.</param>
            <param name="orderItemProduct">Order item to be deleted. Item must not be printed.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.DeleteOrderItemModifier(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.Data.Orders.IOrderItemModifier,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Deletes order item modifier from order item that represents the assortment position. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order that contains the item to be removed. Item must not be printed.</param>
            <param name="orderItemProduct">Order item that contains the modifier to be removed.</param>
            <param name="orderItemModifier">Modifier to be removed.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.DeletePrintedOrderItemProduct(Resto.Front.Api.V3.IOperationService,System.String,Resto.Front.Api.V3.Data.Orders.IRemovalType,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Deletes order item that is already printed. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="comment">Comment to the charge-off. Max length - 255 chars.</param>
            <param name="removalType">Object that describes how item should be charged-off.</param>
            <param name="order">Order that contains the item to be removed.</param>
            <param name="orderItemProduct">Order item to be removed. Item must be printed.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.DeletePrintedOrderItemModifier(Resto.Front.Api.V3.IOperationService,System.String,Resto.Front.Api.V3.Data.Orders.IRemovalType,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.Data.Orders.IOrderItemModifier,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Deletes order item modifier that is already printed. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="comment">Comment to the charge-off. Max length - 255 chars.</param>
            <param name="removalType">Object that describes how item should be charged-off.</param>
            <param name="order">Order that contains the item to be removed. Item must not be printed.</param>
            <param name="orderItemProduct">Order item that contains the modifier to be removed.Item must be printed.</param>
            <param name="orderItemModifier">Order item modifier to be removed. Modifier must be printed.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeOrderItemComment(Resto.Front.Api.V3.IOperationService,System.String,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes product order item's comment.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="comment">New comment for product order item.</param>
            <param name="order">Order that contains product order item which comment will be changed.</param>
            <param name="orderItemProduct">Product order item which comment will be changed. Product order item should not been printed.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.DeleteOrderItemComment(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Deletes product order item's comment.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order that contains product order item which comment will be changed.</param>
            <param name="orderItemProduct">Product order item which comment will be changed. Product order item should not been printed.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.AddDiscount(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Orders.IDiscountType,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Adds simple discount of known type to existing order. User must have rights to work with discounts.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="discount">Type of the discount</param>
            <param name="order"></param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.AddDiscountByCardNumber(Resto.Front.Api.V3.IOperationService,System.String,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Orders.IDiscountCard,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Add discount by card number</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="cardNumber">Number of iiko discount card.</param>
            <param name="order">Order where discount will be applied</param>
            <param name="discountCard">Iiko discount card data.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.DeleteDiscount(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Orders.IDiscountItem,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Removes discount of known type to existing order. User must have rights to work with discounts.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="discountItem">Discount to be removed.</param>
            <param name="order"></param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.AddPaymentItem(Resto.Front.Api.V3.IOperationService,System.Decimal,System.Object,Resto.Front.Api.V3.Data.Payments.IPaymentType,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Add new payment item to order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="paymentSum">Sum of payment item that will be added.</param>
            <param name="additionalData">Payment type specific additional data.</param>
            <param name="paymentType">Type of payment item that will be added.</param>
            <param name="order">Order to which payment item will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.AddExternalPaymentItem(Resto.Front.Api.V3.IOperationService,System.Decimal,System.Boolean,System.Object,Resto.Front.Api.V3.Data.Payments.IPaymentType,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Add new external payment item to order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="paymentSum">Sum of payment item that will be added.</param>
            <param name="isProcessed">Whether payment item was already processed by some external system.</param>
            <param name="additionalData">Payment type specific additional data.</param>
            <param name="paymentType">Type of payment item that will be added. It should be allowed to create external payment items of this type.</param>
            <param name="order">Order to which payment item will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.DeletePaymentItem(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Payments.IPaymentItem,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Delete existing payment item from order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="paymentItem">Payment item to be deleted.</param>
            <param name="order">Order from which payment item will be deleted.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.DeleteExternalPaymentItem(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Payments.IPaymentItem,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Delete existing external payment item from order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="paymentItem">External payment item to be deleted.</param>
            <param name="order">Order from which payment item will be deleted.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.CreateStreet(Resto.Front.Api.V3.IOperationService,System.Guid,System.String,Resto.Front.Api.V3.Data.Brd.ICity,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Creates new street.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Id of creating street</param>
            <param name="name">Name of creating street</param>
            <param name="city">City of creating street</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.CreateStreet(Resto.Front.Api.V3.IOperationService,System.String,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Creates new street.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="name">Name of creating street</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeStreetName(Resto.Front.Api.V3.IOperationService,System.String,Resto.Front.Api.V3.Data.Brd.IStreet,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes street's name</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="name">Name of street</param>
            <param name="street">Changing street</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.DeleteOrRestoreStreet(Resto.Front.Api.V3.IOperationService,System.Boolean,Resto.Front.Api.V3.Data.Brd.IStreet,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Deletes street</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="delete">Delete or restore street flag. true - to delete, false - to restore.</param>
            <param name="street">Changing street</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeClientName(Resto.Front.Api.V3.IOperationService,System.String,Resto.Front.Api.V3.Data.Brd.IClient,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes client name</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="name">new name of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeClientSurname(Resto.Front.Api.V3.IOperationService,System.String,Resto.Front.Api.V3.Data.Brd.IClient,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes client surname</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="surname">new surname of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeClientNick(Resto.Front.Api.V3.IOperationService,System.String,Resto.Front.Api.V3.Data.Brd.IClient,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes client nickname</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="nick">new nick of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeClientCardNumber(Resto.Front.Api.V3.IOperationService,System.String,Resto.Front.Api.V3.Data.Brd.IClient,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes client card number</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="cardNumber">new card number of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeClientComment(Resto.Front.Api.V3.IOperationService,System.String,Resto.Front.Api.V3.Data.Brd.IClient,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes client comment</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="comment">new name of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeClientPhones(Resto.Front.Api.V3.IOperationService,System.Collections.Generic.List{Resto.Front.Api.V3.Data.DataTransferObjects.PhoneDto},Resto.Front.Api.V3.Data.Brd.IClient,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes client phones list</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="phones">new phones list of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeClientEmails(Resto.Front.Api.V3.IOperationService,System.Collections.Generic.List{Resto.Front.Api.V3.Data.DataTransferObjects.EmailDto},Resto.Front.Api.V3.Data.Brd.IClient,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes client emails list</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="emails">new emails list of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeClientAddresses(Resto.Front.Api.V3.IOperationService,System.Collections.Generic.List{Resto.Front.Api.V3.Data.DataTransferObjects.AddressDto},System.Nullable{System.Int32},Resto.Front.Api.V3.Data.Brd.IClient,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes client addresses.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="addresses">new addresses list of client</param>
            <param name="mainAddressIndex">index of client main address</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeClientMainAddressIndex(Resto.Front.Api.V3.IOperationService,System.Nullable{System.Int32},Resto.Front.Api.V3.Data.Brd.IClient,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes client main address index</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="mainAddressIndex">index of client main address</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeClientBlacklistInfo(Resto.Front.Api.V3.IOperationService,System.Boolean,System.String,Resto.Front.Api.V3.Data.Brd.IClient,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes client blacklist info</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="isInBlacklist">Is changing client in blacklist.</param>
            <param name="reason">The reason of adding client to blacklist.</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeClientIikoNetId(Resto.Front.Api.V3.IOperationService,System.Guid,Resto.Front.Api.V3.Data.Brd.IClient,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes client's account in Plazius</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="iikonetId">New account in Plazius</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeDeliveryProblemStatus(Resto.Front.Api.V3.IOperationService,System.Boolean,Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Change delivery problem status</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="hasProblem">Problem flag</param>
            <param name="delivery">Delivery to change</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeDeliveryProblemComment(Resto.Front.Api.V3.IOperationService,System.String,Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Change delivery problem comment</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="comment">Problem comment. MaxLength = 1000 symbols. If HasProblem = false it does not mean that ProblemComment = null, because comment isn't erased automatically after set HasProblem to false.</param>
            <param name="delivery">Delivery to change</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeDeliveryPhone(Resto.Front.Api.V3.IOperationService,System.String,Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes delivery phone</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="phone">New phone value of delivery</param>
            <param name="delivery">Delivery to change phone</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeDeliveryEmail(Resto.Front.Api.V3.IOperationService,System.String,Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Change delivery e-mail</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="email">E-mail</param>
            <param name="delivery">Delivery to change</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeDeliveryComment(Resto.Front.Api.V3.IOperationService,System.String,Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Change delivery comment</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="comment">Comment</param>
            <param name="delivery">Delivery to change</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeDeliveryExpectedDeliverTime(Resto.Front.Api.V3.IOperationService,System.DateTime,Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Change time when client want delivery to be delivered</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="expectedDeliverTime">Expected deliver time</param>
            <param name="delivery">Delivery to change</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeDeliveryAddress(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.DataTransferObjects.AddressDto,Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes address of delivery</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="address">New address of delivery</param>
            <param name="delivery">Delivery to change address</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeDeliveryCourier(Resto.Front.Api.V3.IOperationService,System.Boolean,Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.IUser,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Assign/Change delivery courier. Can use this action only before delivery is to be delivered.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="isCourierSelectedManually">Is courier selected manually and can't be replaced with automatic logistic system</param>
            <param name="delivery">Delivery to assign courier.</param>
            <param name="courier">Courier to assign to delivery.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.SetDeliveryConfirmed(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Change delivery status to confirmed.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="delivery">Delivery to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeDeliveryConfirmTime(Resto.Front.Api.V3.IOperationService,System.Nullable{System.DateTime},Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Change delivery when delivery was confirmed.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="confirmTime">Confirmation time</param>
            <param name="delivery">Delivery to change time.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.SetDeliveryUnconfirmed(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Change delivery status to unconfirmed.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="delivery">Delivery to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.SetDeliveryUndelivered(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Change delivery status to OnWay from status delivered.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="delivery">Delivery to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.SetDeliveryDelivered(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Change delivery status to delivered.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="delivery">Delivery to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeDeliveryActualDeliverTime(Resto.Front.Api.V3.IOperationService,System.Nullable{System.DateTime},Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Change time when delivery was actually delivered.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="actualDeliverTime">Actual deliver time</param>
            <param name="delivery">Delivery to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeDeliveryDuration(Resto.Front.Api.V3.IOperationService,System.Nullable{System.TimeSpan},Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Change duration of delivery processing</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="duration">Calculated delivery duration (accurate within minutes).</param>
            <param name="delivery">Change precalculated delivery duration.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeDeliveryOperator(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.IUser,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Assign/Change delivery operator.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="delivery">Delivery to assign operator.</param>
            <param name="deliveryOperator">Operator to assign to delivery.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeDeliverySplitBetweenPersons(Resto.Front.Api.V3.IOperationService,System.Boolean,Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes delivery property if order should be split between persons</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="splitBetweenPersons">Delivery property if order should be split between persons</param>
            <param name="delivery">Delivery to change</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeDeliveryPersonsCount(Resto.Front.Api.V3.IOperationService,System.Int32,Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes persons count for a delivery</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="personsCount">Delivery persons count</param>
            <param name="delivery">Delivery to change</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeDeliveryMarketingSource(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Brd.IMarketingSource,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Assign/Change delivery marketing source.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="delivery">Delivery to assign marketing source.</param>
            <param name="marketingSource">Source of delivery.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeDeliveryLocation(Resto.Front.Api.V3.IOperationService,System.Nullable{System.Double},System.Nullable{System.Double},Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Change delivery address location.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="latitude">Latitude of geolocation of delivery address.</param>
            <param name="longitude">Longitude of geolocation of delivery address.</param>
            <param name="delivery">Delivery to change marketing source.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.CreateReserve(Resto.Front.Api.V3.IOperationService,System.DateTime,Resto.Front.Api.V3.Data.Brd.IClient,Resto.Front.Api.V3.Data.Organization.Sections.ITable,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Creates reservation for planned visit in future. Table will be marked as reserved to prevent collision with other guests at the same time.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="estimatedStartTime">Approximate date and time of planned visit, used to divide different visits and remind staff to prepare table.</param>
            <param name="client">Client who asked to reserve table for him.</param>
            <param name="table">Specifies table to be reserved at some moment in future.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.CreateBanquet(Resto.Front.Api.V3.IOperationService,System.DateTime,Resto.Front.Api.V3.Data.Brd.IClient,Resto.Front.Api.V3.Data.Organization.Sections.ITable,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Creates reservation for planned event in future. Table will be marked as reserved to prevent collision with other events at the same time.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="estimatedStartTime">Approximate date and time of planned event, used to divide different events and remind staff to prepare table and ingredients.</param>
            <param name="client">Client who asked to reserve table for his event.</param>
            <param name="table">Specifies table to be reserved at some moment in future.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.CreateBanquet(Resto.Front.Api.V3.IOperationService,System.DateTime,Resto.Front.Api.V3.Data.Brd.IClient,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Creates reservation for planned event in future. Order's table will be marked as reserved to prevent collision with other events at the same time.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="estimatedStartTime">Approximate date and time of planned event, used to divide different events and remind staff to prepare table and ingredients.</param>
            <param name="client">Client who asked to reserve table for his event.</param>
            <param name="order">Order used to form menu for coming event, specify serve sequence (via courses), prepay.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeReserveComment(Resto.Front.Api.V3.IOperationService,System.String,Resto.Front.Api.V3.Data.Brd.IReserve,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes reserve comment. Use empty string to clear comment.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="comment">Arbitrary string comment for the reserve, maximum length is 250 chars.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeReserveDuration(Resto.Front.Api.V3.IOperationService,System.TimeSpan,Resto.Front.Api.V3.Data.Brd.IReserve,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes estimated reserve duration (amount of time betwen visit's start and end). Default reserve duration is 2 hours, banquet duration is 3 hours.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="duration">Reserve duration, minimum value is 15 minutes, maximum value is 23 hours and 59 minutes, maximum precision is 1 minute (so 1h 25m 42s is invalid as too precise value).</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeReserveEstimatedStartTime(Resto.Front.Api.V3.IOperationService,System.DateTime,Resto.Front.Api.V3.Data.Brd.IReserve,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes estimated reserve start time.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="estimatedStartTime">Approximate date and time of planned visit, used to divide different visits and remind staff to prepare table.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeReserveGuestsCount(Resto.Front.Api.V3.IOperationService,System.Int32,Resto.Front.Api.V3.Data.Brd.IReserve,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes estimated guests count for reserve. Default value is 2.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="guestsCount">Estimated guests count, minimum value is 1, maximum value is 1000.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeReserveTable(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Organization.Sections.ITable,Resto.Front.Api.V3.Data.Brd.IReserve,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes reserving table.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="table">Specifies table to be reserved at some moment in future.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeReserveReminder(Resto.Front.Api.V3.IOperationService,System.Boolean,Resto.Front.Api.V3.Data.Brd.IReserve,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Changes reserve reminder flag.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="shouldRemind">Whether to remind staff to prepare table beforehand.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.BindReserveToOrder(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Brd.IReserve,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Converts exising reserve or banquet without order to banquet with order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="reserve">Reserve to bind.</param>
            <param name="order">Order used to bind reserve to.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ReopenReserve(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Brd.IReserve,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Reopens previously closed or canceled reserve.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="reserve">Reserve to reopen.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.StartBanquet(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Brd.IReserve,Resto.Front.Api.V3.Data.Security.IUser,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Transits banquet to the started status.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="reserve">Banquet to start. Banquet must have an order binding, otherwise call <see cref="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.BindReserveToOrder(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Brd.IReserve,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Security.ICredentials)"/> first.</param>
            <param name="waiter">Waiter who will serve the banquet.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.ChangeOrderOriginName(Resto.Front.Api.V3.IOperationService,System.String,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Sets order origin — name of the source this order was received from. Specifying origin allows to analyse efficiency of external order sources such as different web-sites, mobile applications and so on. Origin name can be set only once.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="originName">Non-empty string of the new origin name. Maximum length is 20 chars.</param>
            <param name="order">Order to specify origin.</param>
        </member>
        <member name="M:Resto.Front.Api.V3.Extensions.OperationServiceExtensions.MoveOrderItemProductToAnotherOrder(Resto.Front.Api.V3.IOperationService,Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,Resto.Front.Api.V3.Data.Orders.IOrderItemGuest,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>Moves product item between orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="product">Product item to be moved.</param>
            <param name="destinationGuest">Guest the product item will be assigned to.</param>
            <param name="destinationOrder">Order to move to.</param>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Licensing.ILicenseSlot">
            <summary>Presents a token for single acquired licensing unit (plugin instance or external connection).</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.Sections.IRestaurantSection.OrderItemCommentsEnabled">
            <summary>Whether comments to product order items are enabled at section.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.Sections.IRestaurantSection.KitchenCoursesEnabled">
            <summary>Whether courses are enabled at section.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.Sections.IRestaurantSection.DefaultOrderType">
            <summary>Default order type for section</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.IDeliverySettings.SmsNotificationSettings">
            <summary>Sms notification settings for delivery.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.IDeliverySettings.DefaultSelfServiceDeliveryDuration">
            <summary>Average time of delivery at restaurant for self-service.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.IDeliverySettings.ServiceType">
            <summary>Delivery service type: courier, self-service or both of them.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.IDeliverySettings.BeepOnDeliveriesUpdate">
            <summary>Should operator be informed with system sound "beep" when delivery is created/updated.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.IDeliverySettings.MarketingSourceRequired">
            <summary>Check whether input or marketing source(advertising) is required</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Organization.ICurrencySettings">
            <summary>Currency settings</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.ICurrencySettings.FormatInfo">
            <summary>Provides culture-specific information for formatting and parsing numeric values</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.ICurrencySettings.MinimumDenomination">
            <summary>Minimum denomination</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.ICurrencySettings.ShowFractionalPart">
            <summary>Should show the fractional part</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Organization.IConception">
            <summary>Conception of point of sale.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.IConception.Name">
            <summary>Name of conception</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.IConception.Code">
            <summary>Code of conception</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Organization.IPointOfSale">
            <summary>Point of sale</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.IPointOfSale.IsMain">
            <summary>Is current point of sale main cash</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.IPointOfSale.Conception">
            <summary>Conception of current point of sale</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Organization.IOrderType">
            <summary>Order type</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.IOrderType.Name">
            <summary>Order type name.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.IOrderType.OrderServiceType">
            <summary>Orders of which service type this order type is applicable for.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.IOrderType.IsDefaultForServiceType">
            <summary>Gets a value that indicates whether this order type set by default to orders with corresponding service type.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Organization.IOrderType.IsActive">
            <summary>Gets a value that indicates whether this order type can be set to orders. Order type can be activated or deactivated via iikoOffice.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Assortment.IProduct.IsActive">
            <summary>Gets a value that indicates whether this product is active in assortment base. Product can be activated or deactivated via iikoOffice.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Assortment.IProduct.MenuIndex">
            <summary>Gets an index of product in hierarchical menu, can be used to sort products inside the same product group.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Assortment.IProduct.Number">
            <summary>Nomenclature article of product.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Assortment.IProductGroup.MenuIndex">
            <summary>Gets an index of product group in hierarchical menu, can be used to sort product groups inside the same parent product group.</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Assortment.IQuickMenuProductItem">
            <summary>Presents product cell of quick menu page grid.</summary>	
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Assortment.IQuickMenuItem">
            <summary>Presents cell of quick menu page grid.</summary>	
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Assortment.IQuickMenuProductGroupItem">
            <summary>Presents product group cell of quick menu page grid.</summary>	
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Assortment.IQuickMenuPage">
            <summary>Presents page of quick menu.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Assortment.IQuickMenuPage.Name">
            <summary>Quick menu page name.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Assortment.IQuickMenuPage.Items">
            <summary>Quick menu items grid. Empty cells are null, others are either product or product group.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IRemovalType.Name">
            <summary>Name of removal type</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IRemovalType.CommentRequired">
            <summary>If <c>true</c>, printed order item deletion comment is mandatory, otherwise comment is optional.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IOrderItemGuest.Rank">
            <summary>Guest's rank in order.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IOrderItemProduct.CookingTime">
            <summary>Standard cooking time defined by settings if cooking is started, otherwise <c>null</c>.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IOrderItemProduct.Status">
            <summary>Gets the status of the current order item.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IOrderItemProduct.Course">
            <summary>Gets the course of the current order item.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IOrderItemProduct.Kitchen">
            <summary>Product cooking place.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IOrderItemModifier.AmountIndependentOfParentAmount">
            <summary>Whether amount of the modifier is absolute or relative to parent amount. When modifier amount depends on parent, it means multiplication — specified amount of modifier should be cooked per each parent unit, otherwise it means addition — specified amount of modifier should be cooked for whole parent.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IOrder.BillTime">
            <summary>Gets the bill cheque print time of the current order.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IOrder.CloseTime">
            <summary>Gets the bill cheque print time of the current order.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IOrder.Cashier">
            <summary>Gets the user closed the current order.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IOrder.IsBanquetOrder">
            <summary>Order is banquet.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IOrder.ProcessedPaymentsSum">
            <summary>Sum of all processed payment items in order.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IOrder.EstimatedGuestsCount">
            <summary>Gets estimated guests count, that is greater than or equal to added guests count. When single order is used to serve many people and handling each of them as a separate guest may be inconvenient, this property will indicate estimated guests count while guests collection will contain as many guests as needed for waiters.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IOrder.OriginName">
            <summary>Optional marker used to specify order origin. This property contains either null or name of the source order was received from. Specifying origin allows to analyse efficiency of external order sources such as different web-sites, mobile applications and so on.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IDiscountType.Name">
            <summary>Name of discount type</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IDiscountType.Deleted">
            <summary>Is this item deleted.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IDiscountType.IsActive">
            <summary>Is this item active for current group. Note that this property doesn't associated with <see cref="P:Resto.Front.Api.V3.Data.Orders.IDiscountType.Deleted"/>. I.e. discount type can be deleted and active at the same time.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IDiscountType.CanApplyManually">
            <summary>Can discount be applied to order manually.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Orders.IDiscountType.CanApplyByCardNumber">
            <summary>Can discount be applied to order by card number.</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrder">
            <summary>Order equivalent for kitchen. Kitchen orders created automatically from <see cref="T:Resto.Front.Api.V3.Data.Orders.IOrder"/> and have independent lifetime.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrder.Number">
            <summary>Number of the source order.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrder.Table">
            <summary>Table of the source order.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrder.Waiter">
            <summary>Person who serves the source order.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrder.Items">
            <summary>Source order item products equivalent for kitchen. Only printed order item products are taken into account for kitchen.</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct">
            <summary>Order item product equivalent for kitchen.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.Amount">
            <summary>Product amount to be cooked.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.Product">
            <summary>Product to be cooked.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.Kitchen">
            <summary>Product cooking place.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.Deleted">
            <summary>Whether printed product has been deleted from source order.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.Course">
            <summary>Gets course of this order item product.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.ServeGroupNumber">
            <summary>Identifies order item products group to be served together. Cooking of products from the same order with the same serve group number should be completed at the same time, so that waiter will serve them together.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.IsCookingStarted">
            <summary>Whether cooking of the product started. Depending on kitchen settings and waiter intentions product cooking can start immediately after printing or with some delay. Product with short cooking time may wait for long-time cooking product from the same serve group (to be served together), product of second or above course may wait for corresponding serve cheque printing. This property is perfect, expected state, do not mess up with processing status, which means actual status (cook can begin processing before or after the appointed time).</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.PrintTime">
            <summary>Source order item product print time.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.EstimatedCookingBeginTime">
            <summary>Moment when product cooking should be started. This property is null until cooking should be started.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.Processing1BeginTime">
            <summary>Moment when product last time switched to the <see cref="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing1"/> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.Processing2BeginTime">
            <summary>Moment when product last time switched to the <see cref="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing2"/> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.Processing3BeginTime">
            <summary>Moment when product last time switched to the <see cref="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing3"/> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.Processing4BeginTime">
            <summary>Moment when product last time switched to the <see cref="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing4"/> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.ProcessingCompleteTime">
            <summary>Moment when product last time switched to the <see cref="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Processed"/> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.ServeTime">
            <summary>Moment when product last time switched to the <see cref="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Served"/> status.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.ProcessingStatus">
            <summary>Gets current position in a product processing lifecycle.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.CookingTime">
            <summary>Standard cooking time defined by settings if cooking is started, otherwise <c>null</c>.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.Comment">
            <summary>Optional text comment, can be used as a message from waiter to cook.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProduct.Modifiers">
            <summary>Gets product modifiers. This collection is kitchen equivalent of simple and group child modifiers of the source product.</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProductComment">
            <summary>Comment for order item product, kitchen equivalent of <see cref="T:Resto.Front.Api.V3.Data.Orders.IOrderItemProductComment"/>.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProductComment.Comment">
            <summary>Text of the comment.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemProductComment.Deleted">
            <summary>Whether comment of the printed produt was deleted.</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemModifier">
            <summary>Specifies some kind of predefined product cooking customization.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemModifier.Amount">
            <summary>Modifier amount to be cooked.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemModifier.AmountIndependentOfParentAmount">
            <summary>Whether amount of the modifier is absolute or relative to parent amount. When modifier amount depends on parent, it means multiplication — specified amount of modifier should be cooked per each parent unit, otherwise it means addition — specified amount of modifier should be cooked for whole parent.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemModifier.Product">
            <summary>Modifier to be cooked.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemModifier.Kitchen">
            <summary>Modifier cooking place.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemModifier.Deleted">
            <summary>Whether modifier or the printed product has been deleted from source order.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemModifier.EstimatedCookingBeginTime">
            <summary>Moment when modifier cooking should be started. This property is null until cooking should be started.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemModifier.Processing1BeginTime">
            <summary>Moment when modifier last time switched to the <see cref="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing1"/> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemModifier.Processing2BeginTime">
            <summary>Moment when modifier last time switched to the <see cref="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing2"/> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemModifier.Processing3BeginTime">
            <summary>Moment when modifier last time switched to the <see cref="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing3"/> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemModifier.Processing4BeginTime">
            <summary>Moment when modifier last time switched to the <see cref="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing4"/> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemModifier.ProcessingCompleteTime">
            <summary>Moment when modifier last time switched to the <see cref="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Processed"/> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemModifier.ServeTime">
            <summary>Moment when modifier last time switched to the <see cref="F:Resto.Front.Api.V3.Data.Kitchen.KitchenOrderItemProcessingStatus.Served"/> status.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemModifier.ProcessingStatus">
            <summary>Gets current position in a product processing lifecycle.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemModifier.CookingTime">
            <summary>For separate modifiers standard cooking time defined by settings if cooking is started, otherwise <c>null</c>. This property is meaningless for non-separate modifiers.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Kitchen.IKitchenOrderItemModifier.IsSeparate">
            <summary>Whether modifier should be cooked separately from its product. In general this property exposes modifier semantics: while some modifiers specify <i>how</i> to cook their product, another modifiers are additional dish parts or even separate dishes. First type completely depends on product and has the same cooking property values, second type is separate and has own kitchen, status etc.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.SourceId">
            <summary>Identifier of delivery that existed before splitting it by multiple cash registers. Depending on settings, a single order can be split by multiple cash registers before payment, producing multiple orders.  At the same time base delivery is also split; at this moment <i>SourceId</i> of all produced deliveries is set to <i>Id</i> of base delivery. If delivery was not split by cash registers, <i>SourceId</i> returns <i>null</i>.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.Order">
            <summary>Delivery order.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.Client">
            <summary>Client that ordered delivery</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.Courier">
            <summary>Courier that delivers order</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.DeliveryOperator">
            <summary>User who creates delivery</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.IsCourierSelectedManually">
            <summary>Whether courier selected from UI or automatically</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.Status">
            <summary>Status of delivery</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.CancelCause">
            <summary>Cause of cancelling delivery</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.CancelTime">
            <summary>Time when delivery was marked as cancelled</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.Phone">
            <summary>Phone of client</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.Email">
            <summary>E-mail of client</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.Comment">
            <summary>Client's comment on delivery</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.Address">
            <summary>Address where delivery will be delivered</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.CreateTime">
            <summary>Time when delivery is created</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.ExpectedDeliverTime">
            <summary>Time when client wants delivery to be delivered</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.ConfirmTime">
            <summary>Time when delivery was confirmed</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.BillTime">
            <summary>Time when bill cheque for delivery was printed</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.PrintTime">
            <summary>Time when delivery order was printed</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.SendTime">
            <summary>Time when delivery was sent to client</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.ActualDeliverTime">
            <summary>Time when delivery was actually delivered to client</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.CloseTime">
            <summary>Time when delivery was marked as closed</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.HasProblem">
            <summary>Whether delivery is marked as having problem</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.ProblemComment">
            <summary>Description of problem. Not empty ProblemComment doesn't mean delivery is currently problem: comment could been filled in earlier, and after that HasProblem flag was unchecked. That means that delivery had some problems some time ago.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.SourceKey">
            <summary>Source of delivery (for example, some web site, call center)</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.SplitBetweenPersons">
            <summary>Indicates if delivery order should be split between persons or not</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.PersonsCount">
            <summary>Delivery persons count</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.MarketingSource">
            <summary>Advertising Source of delivery (for example, some web site, call center)</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.Latitude">
            <summary>Latitude of geoposition of the delivery address</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IDelivery.Longitude">
            <summary>Longitude of geoposition of the delivery address</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IReserve.Order">
            <summary>Order used to form menu for banquet, specify serve sequence (via courses), prepay.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IReserve.GuestsComingTime">
            <summary>Gets the time when guests came and reserve was closed or banquet was started.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IReserve.EstimatedStartTime">
            <summary>Gets the estimated time when reserve will be closed or banquet will be started.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IReserve.Comment">
            <summary>Gets the optional comment for reserve or banquet.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IReserve.Status">
            <summary>Gets the status of the reserve or banquet.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IReserve.Table">
            <summary>Gets the reserved table.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IReserve.GuestsCount">
            <summary>Gets estimated guests count.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IReserve.Duration">
            <summary>Gets estimated banquet duration.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IReserve.ShouldRemind">
            <summary>Whether to remind staff to prepare table beforehand. Table preparation time can be changed via iikoOffice (1 hour by default).</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IClient.InBlacklist">
            <summary>Is client in blacklist.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IClient.BlacklistReason">
            <summary>Reason why client was added to blacklist.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IClient.MarketingSource">
            <summary>Advertising Source of customer (for example, some web site, call center)</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IClient.IikoNetId">
            <summary>Id of client's account in iikoNet.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Brd.IClient.DateCreated">
            <summary>Date of client's creation.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Navigation.INavigationToPaymentPageInfo.OrderId">
            <summary>Temporary class to send order Id.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Payments.IPaymentType.Name">
            <summary>Name of payment type</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Payments.IPaymentType.IsCombinable">
            <summary>Is payment type combinable with other payment types.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Payments.IPaymentType.IsCash">
            <summary>Does payment type present cash payment</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Payments.IPaymentType.IsEnabled">
            <summary>Is payment type enabled for some kind of usage. Specific purposes may have additional constraints.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Payments.IPaymentType.CanDisplayChange">
            <summary>If change can be displayed for payment type.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Payments.IPaymentType.DiscountType">
            <summary>Recommended <see cref="T:Resto.Front.Api.V3.Data.Orders.IDiscountType"/> to apply with this payment type. You should delete discount item of this discount type if you deleting payment item of this payment type.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.Payments.IPaymentItem.IsPrepay">
            <summary>Whether payment item is prepay.</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.View.ICardInputResult">
            <summary>Slided card.</summary>	
        </member>
        <member name="T:Resto.Front.Api.V3.Data.View.IInputResult">
            <summary>Interface of input result.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.View.ICardInputResult.FullCardTrack">
            <summary>Full card track.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.View.ICardInputResult.Track1">
            <summary>First part of track.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.View.ICardInputResult.Track2">
            <summary>Second part of track.</summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Data.View.ICardInputResult.Track3">
            <summary>Third part of track.</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Data.View.INumberInputResult">
            <summary>Entered number.</summary>	
        </member>
        <member name="P:Resto.Front.Api.V3.Data.View.INumberInputResult.Number">
            <summary>Number.</summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.CannotAddInactiveProductException">
            <summary>
            The exception that is thrown on attempt to use product which isn't included in menu.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.ConstraintViolationException">
            <summary>
            The exception that is thrown when an operation violates business model constraints.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.ConstraintViolationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.ConstraintViolationException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.ConstraintViolationException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.ConstraintViolationException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.ConstraintViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.ConstraintViolationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.ConstraintViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.ConstraintViolationException"/> class with serialized data.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.CannotAddInactiveProductException.#ctor(Resto.Front.Api.V3.Data.Assortment.IProduct)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.CannotAddInactiveProductException"/> class with a specified product.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Exceptions.CannotAddInactiveProductException.Product">
            <summary>
            Gets the product that caused this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.CannotCancelNotNewDeliveryException">
            <summary>
            The exception that is thrown on attempt to cancel delivery, which status is other than <see cref="F:Resto.Front.Api.V3.Data.Brd.DeliveryStatus.New"/> or <see cref="F:Resto.Front.Api.V3.Data.Brd.DeliveryStatus.Unconfirmed"/>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.EntityUsingException">
            <summary>
            The exception that is thrown when entity cannot be used in specific context.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.EntityUsingException.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.EntityUsingException"/> class with specified entity id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.EntityUsingException.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.EntityUsingException"/> class with specified entity id and error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.EntityUsingException.#ctor(System.Guid,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.EntityUsingException"/> class with specified entity id and error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.EntityUsingException.#ctor(System.Guid,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.EntityUsingException"/> class with specified entity id, error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.EntityUsingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.EntityUsingException"/> class with serialized data.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Exceptions.EntityUsingException.EntityId">
            <summary>
            Identifier of entity which usage caused this exception.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.CannotCancelNotNewDeliveryException.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.CannotCancelNotNewDeliveryException"/> class with a specified delivery id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.CannotCancelNotNewDeliveryException.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.CannotCancelNotNewDeliveryException"/> class with a specified delivery id and error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.CannotCancelNotNewDeliveryException.#ctor(System.Guid,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.CannotCancelNotNewDeliveryException"/> class with a specified delivery id,
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.CannotUseInactiveEntityException">
            <summary>
            The exception that is thrown when entity cannot be used in specific context because it is inactive.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.CannotUseInactiveEntityException.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.CannotUseInactiveEntityException"/> class with specified entity id and error message.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.CannotCreateEntityException">
            <summary>
            The exception that is thrown when entity creation fails.
            Most likely reason for this exception is network problem.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.CannotCreateEntityException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.CannotCreateEntityException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.CannotCreateEntityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.CannotCreateEntityException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.CannotCreateEntityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.CannotCreateEntityException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.InsufficientLicenseException">
            <summary>
            The exception that is thrown when license slot cannot be acquired.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.InsufficientLicenseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.InsufficientLicenseException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.InsufficientLicenseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.InsufficientLicenseException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.InsufficientLicenseException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.InsufficientLicenseException"/> class with a specified error message.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.ServerConnectionException">
            <summary>
            The exception that is thrown when message wasn't sent due to connection troubles.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.ServerConnectionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.ServerConnectionException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.ServerConnectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.ServerConnectionException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.ServerConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.ServerConnectionException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.EntityStubUsingException">
            <summary>
            Entity stub usage outruns its creation or entity stub from one edit session is used in another edit session.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.EntityStubUsingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.EntityStubUsingException"/> class with a specified error message.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.AuthenticationException">
            <summary>
            The exception that is thrown when plugin authentication fails.
            </summary>
            <seealso cref="M:Resto.Front.Api.V3.IOperationService.AuthenticateByPin(System.String)"/>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.AuthenticationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.AuthenticationException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.AuthenticationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.AuthenticationException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.AuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.AuthenticationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.EntityModifiedException">
            <summary>
            The exception that is thrown when versioned entity was modified by someone between reading an entity and applying changes to it.
            In general case parallel changes cannot be merged automatically, so optimistic locking prevents overwriting someones changes or getting inconsistent entity state.
            </summary>
            <remarks>
            Plugin should re-read changed entity, ensure that rejected changes are compatible with new entity state and re-apply them.
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.EntityModifiedException.#ctor(Resto.Front.Api.V3.Editors.ExistingEntityStub,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.EntityModifiedException"/> class with specified entity stub and actual version.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.EntityAlreadyInUseException">
            <summary>
            The exception that is thrown on attempt to change entity that is already being edited by someone.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.EntityAlreadyInUseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.EntityAlreadyInUseException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.EntityAlreadyInUseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.EntityAlreadyInUseException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.EntityAlreadyInUseException.#ctor(System.String,System.String,Resto.Front.Api.V3.Data.Security.IUser)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.EntityAlreadyInUseException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.EntityAlreadyInUseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.EntityAlreadyInUseException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Exceptions.EntityAlreadyInUseException.LockedTerminalName">
            <summary>
            Terminal that locked entity.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Exceptions.EntityAlreadyInUseException.LockedUser">
            <summary>
            User, who locked entity.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.EntityNotFoundException">
            <summary>
            The exception that is thrown on attempt to use entity that doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.EntityNotFoundException.#ctor(System.Guid,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.EntityNotFoundException"/> class with specified entity id and type.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.EntityNotFoundException.#ctor(System.Guid,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.EntityNotFoundException"/> class with specified entity id, type and error message.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.PaymentTypeConfigurationException">
            <summary>
            The exception that is thrown when a specified payment type is not well configured.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.PaymentTypeConfigurationException.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.PaymentTypeConfigurationException"/> class.
            </summary>
            <param name="paymentTypeId">The payment type id.</param>
            <param name="message">The error message (optional).</param>
        </member>
        <member name="P:Resto.Front.Api.V3.Exceptions.PaymentTypeConfigurationException.PaymentTypeId">
            <summary>
            Gets the misconfigured payment type id.
            </summary>
            <value>The payment type id.</value>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.PermissionDeniedException">
            <summary>
            The exception that is thrown on trying to execute operation without having required permissions.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.PermissionDeniedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.PermissionDeniedException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.PermissionDeniedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.PermissionDeniedException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.PermissionDeniedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.PermissionDeniedException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Exceptions.UserSessionInvalidException">
            <summary>
            The exception that is thrown on trying to use credentials that doesn't correspond to valid user session.
            Session may become outdated if user is deactivated or his pin is changed since session start.
            </summary>
            <seealso cref="M:Resto.Front.Api.V3.IOperationService.AuthenticateByPin(System.String)"/>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.UserSessionInvalidException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.UserSessionInvalidException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.UserSessionInvalidException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.UserSessionInvalidException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.Exceptions.UserSessionInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.V3.Exceptions.UserSessionInvalidException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.IFrontPlugin">
            <summary>
            Common interface for every front plugin.
            Derive from <see cref="T:System.MarshalByRefObject"/> and implement this interface to make front treat your class as plugin.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IFrontPlugin.Init(System.IServiceProvider)">
            <summary>
            Plugin's entry point, this method will be called once after loading plugin.
            </summary>
            <param name="serviceProvider">Provider for retrieving api services.</param>
        </member>
        <member name="T:Resto.Front.Api.V3.IInternalOperationService">
            <summary>
            Contract for internal (privileged) operations.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IInternalOperationService.SendDeliverySms(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Send SMS message.
            </summary>
            <param name="phone">Phone number in international format (example: +79271234567).</param>
            <param name="message">Message text.</param>
            <param name="deliveryNumber">Delivery number.</param>
            <param name="orderNumber">Order number.</param>
            <exception cref="T:Resto.Front.Api.V3.Exceptions.ServerConnectionException"/>
        </member>
        <member name="M:Resto.Front.Api.V3.IInternalOperationService.GetServerUrl">
            <summary>
            Return url of server from Front configuration.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.ILicensingService">
            <summary>
            Service provides access to plugin licensing.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.ILicensingService.AcquireSlot(System.Int32,System.Guid)">
            <summary>
            Acquires one slot from the specified module for client with specified identifier.
            This method will temporarily bind returned slot to the client,
            so repeated acquisitions from the same module for the same client will return the same slot.
            </summary>
            <param name="moduleId">The licensable module identifier.</param>
            <param name="clientId">The calling client identifier.</param>
            <returns></returns>
            <exception cref="T:Resto.Front.Api.V3.Exceptions.InsufficientLicenseException">License slot could not be acquired.</exception>
        </member>
        <member name="M:Resto.Front.Api.V3.ILicensingService.ReleaseSlot(Resto.Front.Api.V3.Data.Licensing.ILicenseSlot)">
            <summary>
            Releases previously acquired slot.
            This method will unbind the slot from the client it was acquired for.
            </summary>
            <param name="slot">The license slot to be released.</param>
            <exception cref="T:Resto.Front.Api.V3.Exceptions.LicenseSlotReleaseException">License slot could not be released.</exception>
        </member>
        <member name="T:Resto.Front.Api.V3.IOnDemandConnectionService">
            <summary>
            Interface can be used to connect plugin on-demand for the purpose of testing or debugging.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOnDemandConnectionService.GetServiceProvider(System.String)">
            <summary>
            Returns the service provider identical to one passed into <see cref="M:Resto.Front.Api.V3.IFrontPlugin.Init(System.IServiceProvider)"/> method.
            </summary>
            <param name="pluginName">Unique string value that can be used as non-rooted path for config and data storage.
            Conventionally plugin assembly name is used as unique plugin name.</param>
            <returns>Provider for retrieving api services.</returns>
        </member>
        <member name="T:Resto.Front.Api.V3.IReceiptPrinter">
            <summary>
            Instance to perform print actions. Should be used only when it comes like function parameter.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IReceiptPrinter.Print(Resto.Front.Api.V3.Data.Cheques.ReceiptSlip)">
            <summary>
            Printing <see cref="T:Resto.Front.Api.V3.Data.Cheques.ReceiptSlip"/> object on receipt printer.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.IViewManager">
            <summary>
            Interface for displaying data input dialog.
            </summary>	
        </member>
        <member name="M:Resto.Front.Api.V3.IViewManager.ShowInputPopup(System.String,Resto.Front.Api.V3.Data.View.InputTypes)">
            <summary>Shows input dialog.</summary>	
            <param name="title">Dialog title.</param>
            <param name="type">Input types. Can be used as flags.</param>
            <returns>Input result.</returns>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetUser(Resto.Front.Api.V3.Data.Security.ICredentials)">
            <summary>
            Get user corresponding to specified credentials.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.V3.IOperationService.AuthenticateByPin(System.String)"/> method.
            </param>
            <returns>
            User whose pin have been used to authenticate current plugin.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetDeliverySection">
            <summary>
            Returns section of current group where delivery orders are created. Is determined by default table of group.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetDeliveryByOrderId(System.Guid)">
            <summary>
            Returns delivery by delivery order id, null if order doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.IsDeliveryActive">
            <summary>
            Returns whether delivery is active.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.IsDeliveryConfirmationActive">
            <summary>
            Returns whether delivery confirmation is active.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.CancelNewDelivery(Resto.Front.Api.V3.Data.Security.ICredentials,Resto.Front.Api.V3.Data.Brd.IDelivery,Resto.Front.Api.V3.Data.Brd.IDeliveryCancelCause)">
            <summary>
            Cancels new delivery.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.V3.IOperationService.AuthenticateByPin(System.String)"/> method.
            </param>
            <param name="delivery">
            Delivery to cancel
            </param>
            <param name="cancelCause">
            Cause of cancelling delivery
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetHostTerminalPointsOfSale">
            <summary>
            Returns list of points of sale attached to current terminal. Empty list means that current terminal is not cash terminal.
            </summary>
            <returns>
            List of point of sales attached to current terminal.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetHostDeliverySettings">
            <summary>
            Returns delivery settings of restaurant
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetActiveRemovalTypes">
            <summary>
            Gets removal types which are allowed to use.
            </summary>
            <remarks>
            Deleting printed product is unwanted operation usually, so it requires providing reason and removal type. If product was marred, it could be written off from some account depending on removal type.
            </remarks>
            <seealso cref="M:Resto.Front.Api.V3.Editors.IEditSession.DeletePrintedOrderItemProduct(System.String,Resto.Front.Api.V3.Data.Orders.IRemovalType,Resto.Front.Api.V3.Editors.IOrderStub,Resto.Front.Api.V3.Editors.IOrderItemProductStub)"/>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetAllRemovalTypes">
            <summary>
            Gets all removal types (both active and inactive).
            </summary>
            <seealso cref="M:Resto.Front.Api.V3.IOperationService.GetActiveRemovalTypes"/>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetAllProducts">
            <summary>
            Gets all products (both active and inactive).
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetQuickMenu(Resto.Front.Api.V3.Data.Organization.Sections.IRestaurantSection,System.DayOfWeek)">
            <summary>
            Returns quick menu for specified restaurant section and day.
            </summary>
            <remarks>
            Quick menu is zero or more pages with links to products and product groups, can be used in order editor UI to allow adding items to order directly instead of searching them in hierarchical menu.
            </remarks>
            <param name="restaurantSection">
            Restaurant section which contains order's table. Different sections may have different quick menu pages.
            </param>
            <param name="dayOfWeek">
            Specifies for which day menu will be returned. Sections may have different quick menu for different days of week.
            </param>
            <seealso cref="M:Resto.Front.Api.V3.IOperationService.GetHierarchicalMenu"/>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetProductsRemainingAmounts">
            <summary>
            Gets remaining amounts of products in stop list.
            </summary>
            <remarks>
            Products that has small remaining amount can be added to stop list to limit consumption. Selling of product with zero or negative remaining amount is restricted.
            </remarks>
            <returns>
            Dictionary of products and theirs remaining amounts.
            </returns>
            <seealso cref="M:Resto.Front.Api.V3.IOperationService.IsProductSellingRestricted(Resto.Front.Api.V3.Data.Assortment.IProduct)"/>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.IsProductSellingRestricted(Resto.Front.Api.V3.Data.Assortment.IProduct)">
            <summary>
            Checks remaining amount of the product and determines whether selling of that product is restricted.
            </summary>
            <remarks>
            If product selling is restricted, it can be sold only by user with permission to edit menu.
            </remarks>
            <param name="product">
            Product to check remaining amount.
            </param>
            <returns>
            <c>true</c> if the product has too low amount and selling is restricted, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetPriceForCategory(System.Guid,System.Nullable{System.Guid})">
            <summary>
            Returns price for the product according to the given client price category, or null if product doesn't exists.
            </summary>
            <param name="productId">
            Product ID to get price for.
            </param>
            <param name="clientPriceCategoryId">
            Client price category ID to get price according to.
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetAllStreets">
            <summary>
            Gets all streets (both active and inactive).
            </summary>
            <remarks>
            Use <see cref="M:Resto.Front.Api.V3.IOperationService.GetActiveStreets"/> to get active streets only.
            </remarks>
            <seealso cref="M:Resto.Front.Api.V3.IOperationService.GetActiveStreets"/>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetActiveStreets">
            <summary>
            Gets active streets.
            </summary>
            <remarks>
            Use <see cref="M:Resto.Front.Api.V3.IOperationService.GetAllStreets"/> to get all streets (both active and inactive).
            </remarks>
            <seealso cref="M:Resto.Front.Api.V3.IOperationService.GetAllStreets"/>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetClients">
            <summary>
            Gets all clients.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetSplitDeliveries(Resto.Front.Api.V3.Data.Brd.IDelivery)">
            <summary>
            Gets all deliveries that are related with argument through splitting between cash registers. Delivery itself is also returned. If delivery was not split, returns delivery passed as argument.
            </summary>
            <param name="delivery">
            Delivery to get related deliveries.
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.SubmitChanges(Resto.Front.Api.V3.Data.Security.ICredentials,Resto.Front.Api.V3.Editors.IEditSession)">
            <summary>
            Applies all changes made with specified edit session.
            </summary>
            <remarks>
            Do not use current edit session instance for another changes after submitting, create new edit session instead.
            </remarks>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.V3.IOperationService.AuthenticateByPin(System.String)"/> method.
            </param>
            <param name="editSession">
            Edit session with changes.
            </param>
            <returns>
            Created or changed entities. Use corresponding Get method to retrieve entities by their stubs.
            </returns>
            <seealso cref="M:Resto.Front.Api.V3.IOperationService.CreateEditSession"/>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.CreateEditSession">
            <summary>
            Creates an edit session. All changes made with this session will be accumulated without affecting entities. Use <see cref="M:Resto.Front.Api.V3.IOperationService.SubmitChanges(Resto.Front.Api.V3.Data.Security.ICredentials,Resto.Front.Api.V3.Editors.IEditSession)"/> method to apply all changes or do nothing to discard them.
            </summary>
            <returns>
            A new edit session.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.AddErrorMessage(System.String)">
            <summary>
            Shows non-modal error message in the left top corner of the screen.
            </summary>
            <param name="message">
            The message text.
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.AddWarningMessage(System.String)">
            <summary>
            Shows non-modal warning message in the left top corner of the screen.
            </summary>
            <param name="message">
            The message text.
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.AddWarningMessage(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Shows non-modal warning message in the left top corner of the screen.
            </summary>
            <param name="message">
            The message text.
            </param>
            <param name="timeout">
            The message display timeout. If <c>null</c>, message will be shown until user manually closes it, else message will be automatically closed after the specified amount of time.
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.AddNotificationMessage(System.String)">
            <summary>
            Shows non-modal notification message in the left top corner of the screen.
            </summary>
            <param name="message">
            The message text.
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.AddNotificationMessage(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Shows non-modal notification message in the left top corner of the screen.
            </summary>
            <param name="message">
            The message text.
            </param>
            <param name="timeout">
            The message display timeout. If <c>null</c>, message will be shown until user manually closes it, else message will be automatically closed after the specified amount of time.
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.PrintOrderItemProducts(Resto.Front.Api.V3.Data.Security.ICredentials,Resto.Front.Api.V3.Data.Orders.IOrder,System.Collections.Generic.List{Resto.Front.Api.V3.Data.Orders.IOrderItemProduct})">
            <summary>
            Prints service cheque for defined order item products.
            </summary>
            <remarks>
            All products must be either not printed (so they will be printed) or printed (so they will be reprinted), but not mixed.
            </remarks>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.V3.IOperationService.AuthenticateByPin(System.String)"/> method.
            </param>
            <param name="order">
            Order which items will be printed.
            </param>
            <param name="products">
            Order item products to be printed.
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.PrintBillCheque(Resto.Front.Api.V3.Data.Security.ICredentials,Resto.Front.Api.V3.Data.Orders.IOrder)">
            <summary>
            Changes the order to <see cref="F:Resto.Front.Api.V3.Data.Orders.OrderStatus.Bill"/> status if it is not <see cref="F:Resto.Front.Api.V3.Data.Orders.OrderStatus.Bill"/> and prints bill cheque.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.V3.IOperationService.AuthenticateByPin(System.String)"/> method.
            </param>
            <param name="order">
            Order to bill.
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.BillOrder(Resto.Front.Api.V3.Data.Security.ICredentials,Resto.Front.Api.V3.Data.Orders.IOrder,System.Int32)">
            <summary>
            Changes the order to <see cref="F:Resto.Front.Api.V3.Data.Orders.OrderStatus.Bill"/> status and returns text of bill cheque.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.V3.IOperationService.AuthenticateByPin(System.String)"/> method.
            </param>
            <param name="order">
            Order to bill.
            </param>
            <param name="tapeWidth">
            Result text tape width.
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.StartCourseCooking(Resto.Front.Api.V3.Data.Security.ICredentials,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Orders.OrderItemCourse)">
            <summary>
            Starts cooking for all order item products of the specified course.
            </summary>
            <remarks>
            Cooking of <see cref="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.Vip"/> and <see cref="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.First"/> course products start immediately after printing, so allowed course values are <see cref="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.Second"/>, <see cref="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.Third"/> or <see cref="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.Fourth"/> only.
            </remarks>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.V3.IOperationService.AuthenticateByPin(System.String)"/> method.
            </param>
            <param name="order">
            Order to start products cooking from.
            </param>
            <param name="course">
            Which course products cooking should be started.
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.StartProductsCooking(Resto.Front.Api.V3.Data.Security.ICredentials,Resto.Front.Api.V3.Data.Orders.IOrder,System.Collections.Generic.List{Resto.Front.Api.V3.Data.Orders.IOrderItemProduct})">
            <summary>
            Starts cooking for the specified order item products.
            </summary>
            <remarks>
            Products must be printed with one of the following cooking priorities: <see cref="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.Second"/>, <see cref="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.Third"/> or <see cref="F:Resto.Front.Api.V3.Data.Orders.OrderItemCourse.Fourth"/>
            </remarks>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.V3.IOperationService.AuthenticateByPin(System.String)"/> method.
            </param>
            <param name="order">
            Order to start products cooking from.
            </param>
            <param name="products">
            Order item products to start cooking.
            </param>
            <seealso cref="M:Resto.Front.Api.V3.IOperationService.StartCourseCooking(Resto.Front.Api.V3.Data.Security.ICredentials,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Orders.OrderItemCourse)"/>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.PrintBanquet(Resto.Front.Api.V3.Data.Security.ICredentials,Resto.Front.Api.V3.Data.Brd.IReserve)">
            <summary>
            Prints preliminary document with estimated event date and time, planned menu, guests count, client contacts, prepay info, etc.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.V3.IOperationService.AuthenticateByPin(System.String)"/> method.
            </param>
            <param name="banquet">
            Banquet to print. Must be in <see cref="F:Resto.Front.Api.V3.Data.Brd.ReserveStatus.New"/> status and have an order (<see cref="P:Resto.Front.Api.V3.Data.Brd.IReserve.Order"/>).
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.PrintTableReservedCheque(Resto.Front.Api.V3.Data.Security.ICredentials,Resto.Front.Api.V3.Data.Brd.IReserve)">
            <summary>
            Prints short “Table reserved” document with estimated event date and time, guests count and client contacts. Can be used to place onto reserved table as a hint not to occupy it.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.V3.IOperationService.AuthenticateByPin(System.String)"/> method.
            </param>
            <param name="reserve">
            Reserve to print “Table reserved” cheque for.
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.PayOrderAndPayOutOnUser(Resto.Front.Api.V3.Data.Security.ICredentials,Resto.Front.Api.V3.Data.Orders.IOrder,Resto.Front.Api.V3.Data.Payments.IPaymentType,System.Decimal)">
            <summary>
            Pay order and pay out on user.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.V3.IOperationService.AuthenticateByPin(System.String)"/> method.
            </param>
            <param name="order">
            Order to pay.
            </param>
            <param name="paymentType">
            Payment type to pay. Should be “silent” payment type from <see cref="M:Resto.Front.Api.V3.IOperationService.GetPaymentTypesToPayOutOnUser"/>
            </param>
            <param name="sum">
            Sum to pay.
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.PayOrder(Resto.Front.Api.V3.Data.Security.ICredentials,Resto.Front.Api.V3.Data.Orders.IOrder)">
            <summary>
            Pay order with included processed payment items.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.V3.IOperationService.AuthenticateByPin(System.String)"/> method.
            </param>
            <param name="order">
            Order to pay.
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetPaymentTypesToPayOutOnUser">
            <summary>
            Returns payment types that can be proccessed “silently”, without user interface.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.CheckCanEditOrder(Resto.Front.Api.V3.Data.Security.ICredentials,Resto.Front.Api.V3.Data.Orders.IOrder)">
            <summary>
            If current user has permissions to view order.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.V3.IOperationService.AuthenticateByPin(System.String)"/> method.
            </param>
            <param name="order">
            Order to check.
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.CheckProductsSellingRestrictions(Resto.Front.Api.V3.Data.Security.ICredentials,System.Collections.Generic.Dictionary{Resto.Front.Api.V3.Data.Assortment.IProduct,System.Decimal})">
            <summary>
            If current user can add these products with such amounts.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.V3.IOperationService.AuthenticateByPin(System.String)"/> method.
            </param>
            <param name="productsAndAmount">
            Products and amount to check. Amount should be between <see cref="F:Resto.Framework.Common.CommonConstants.MinimumItemAmount"/> and <see cref="F:Resto.Framework.Common.CommonConstants.MaximumItemAmount"/>
            </param>
            <seealso cref="M:Resto.Front.Api.V3.IOperationService.GetProductsRemainingAmounts"/>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.RegisterPaymentSystem(Resto.Front.Api.V3.IExternalPaymentProcessor)">
            <summary>
            Registers payment system.
            </summary>
            <param name="paymentProcessor">
            Payment plugin paymentProcessor.
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.DeleteOrder(Resto.Front.Api.V3.Data.Security.ICredentials,Resto.Front.Api.V3.Data.Orders.IOrder)">
            <summary>
            Deletes order. Order must have no printed items. User must have rights to edit orders.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.V3.IOperationService.AuthenticateByPin(System.String)"/> method.
            </param>
            <param name="order">
            Order that must be deleted.
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.CancelReserve(Resto.Front.Api.V3.Data.Security.ICredentials,Resto.Front.Api.V3.Data.Brd.IReserve,Resto.Front.Api.V3.Data.Brd.ReserveCancelReason)">
            <summary>
            Cancels reservation due to some reason
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.V3.IOperationService.AuthenticateByPin(System.String)"/> method.
            </param>
            <param name="reserve">
            Reserve to cancel.
            </param>
            <param name="reason">
            Reason to cancel planned event.
            </param>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetUserById(System.Guid)">
            <summary>
            Returns user by id or <c>null</c> if user with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetUserById(System.Guid)">
            <summary>
            Returns user by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetTableById(System.Guid)">
            <summary>
            Returns table by id or <c>null</c> if table with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetTableById(System.Guid)">
            <summary>
            Returns table by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetConceptionById(System.Guid)">
            <summary>
            Returns conception by id or <c>null</c> if conception with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetConceptionById(System.Guid)">
            <summary>
            Returns conception by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetOrderTypeById(System.Guid)">
            <summary>
            Returns orderType by id or <c>null</c> if orderType with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetOrderTypeById(System.Guid)">
            <summary>
            Returns orderType by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetProductById(System.Guid)">
            <summary>
            Returns product by id or <c>null</c> if product with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetProductById(System.Guid)">
            <summary>
            Returns product by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetProductGroupById(System.Guid)">
            <summary>
            Returns productGroup by id or <c>null</c> if productGroup with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetProductGroupById(System.Guid)">
            <summary>
            Returns productGroup by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetProductCategoryById(System.Guid)">
            <summary>
            Returns productCategory by id or <c>null</c> if productCategory with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetProductCategoryById(System.Guid)">
            <summary>
            Returns productCategory by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetRemovalTypeById(System.Guid)">
            <summary>
            Returns removalType by id or <c>null</c> if removalType with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetRemovalTypeById(System.Guid)">
            <summary>
            Returns removalType by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetDeliveryOrderById(System.Guid)">
            <summary>
            Returns deliveryOrder by id or <c>null</c> if deliveryOrder with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetDeliveryOrderById(System.Guid)">
            <summary>
            Returns deliveryOrder by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetDiscountTypeById(System.Guid)">
            <summary>
            Returns discountType by id or <c>null</c> if discountType with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetDiscountTypeById(System.Guid)">
            <summary>
            Returns discountType by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetDiscountCardById(System.Guid)">
            <summary>
            Returns discountCard by id or <c>null</c> if discountCard with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetDiscountCardById(System.Guid)">
            <summary>
            Returns discountCard by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetKitchenOrderById(System.Guid)">
            <summary>
            Returns kitchenOrder by id or <c>null</c> if kitchenOrder with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetKitchenOrderById(System.Guid)">
            <summary>
            Returns kitchenOrder by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetDeliveryById(System.Guid)">
            <summary>
            Returns delivery by id or <c>null</c> if delivery with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetDeliveryById(System.Guid)">
            <summary>
            Returns delivery by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetDeliveryCancelCauseById(System.Guid)">
            <summary>
            Returns deliveryCancelCause by id or <c>null</c> if deliveryCancelCause with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetDeliveryCancelCauseById(System.Guid)">
            <summary>
            Returns deliveryCancelCause by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetReserveById(System.Guid)">
            <summary>
            Returns reserve by id or <c>null</c> if reserve with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetReserveById(System.Guid)">
            <summary>
            Returns reserve by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetRegionById(System.Guid)">
            <summary>
            Returns region by id or <c>null</c> if region with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetRegionById(System.Guid)">
            <summary>
            Returns region by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetCityById(System.Guid)">
            <summary>
            Returns city by id or <c>null</c> if city with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetCityById(System.Guid)">
            <summary>
            Returns city by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetStreetById(System.Guid)">
            <summary>
            Returns street by id or <c>null</c> if street with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetStreetById(System.Guid)">
            <summary>
            Returns street by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetClientById(System.Guid)">
            <summary>
            Returns client by id or <c>null</c> if client with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetClientById(System.Guid)">
            <summary>
            Returns client by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetMarketingSourceById(System.Guid)">
            <summary>
            Returns marketingSource by id or <c>null</c> if marketingSource with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetMarketingSourceById(System.Guid)">
            <summary>
            Returns marketingSource by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetPaymentTypeById(System.Guid)">
            <summary>
            Returns paymentType by id or <c>null</c> if paymentType with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetPaymentTypeById(System.Guid)">
            <summary>
            Returns paymentType by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetParentByProduct(Resto.Front.Api.V3.Data.Assortment.IProduct)">
            <summary>
            Returns parent of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetParentByProduct(Resto.Front.Api.V3.Data.Assortment.IProduct)">
            <summary>
            Returns parent of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetSimpleModifiersByProduct(Resto.Front.Api.V3.Data.Assortment.IProduct)">
            <summary>
            Returns simpleModifiers of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetSimpleModifiersByProduct(Resto.Front.Api.V3.Data.Assortment.IProduct)">
            <summary>
            Returns simpleModifiers of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetGroupModifiersByProduct(Resto.Front.Api.V3.Data.Assortment.IProduct)">
            <summary>
            Returns groupModifiers of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetGroupModifiersByProduct(Resto.Front.Api.V3.Data.Assortment.IProduct)">
            <summary>
            Returns groupModifiers of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetIncludedInMenuSectionsByProduct(Resto.Front.Api.V3.Data.Assortment.IProduct)">
            <summary>
            Returns includedInMenuSections of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetIncludedInMenuSectionsByProduct(Resto.Front.Api.V3.Data.Assortment.IProduct)">
            <summary>
            Returns includedInMenuSections of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetParentByProductGroup(Resto.Front.Api.V3.Data.Assortment.IProductGroup)">
            <summary>
            Returns parent of the specified productGroup.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetParentByProductGroup(Resto.Front.Api.V3.Data.Assortment.IProductGroup)">
            <summary>
            Returns parent of the specified productGroup or <c>null</c> if productGroup doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetChildProductsByProductGroup(Resto.Front.Api.V3.Data.Assortment.IProductGroup)">
            <summary>
            Returns childProducts of the specified productGroup.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetChildProductsByProductGroup(Resto.Front.Api.V3.Data.Assortment.IProductGroup)">
            <summary>
            Returns childProducts of the specified productGroup or <c>null</c> if productGroup doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetChildGroupsByProductGroup(Resto.Front.Api.V3.Data.Assortment.IProductGroup)">
            <summary>
            Returns childGroups of the specified productGroup.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetChildGroupsByProductGroup(Resto.Front.Api.V3.Data.Assortment.IProductGroup)">
            <summary>
            Returns childGroups of the specified productGroup or <c>null</c> if productGroup doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetGuestsByOrder(Resto.Front.Api.V3.Data.Orders.IOrder)">
            <summary>
            Returns guests of the specified order.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetGuestsByOrder(Resto.Front.Api.V3.Data.Orders.IOrder)">
            <summary>
            Returns guests of the specified order or <c>null</c> if order doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetGuestByOrder(Resto.Front.Api.V3.Data.Orders.IOrder,System.Guid)">
            <summary>
            Returns guest by id from the specified order.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetGuestByOrder(Resto.Front.Api.V3.Data.Orders.IOrder,System.Guid)">
            <summary>
            Returns guest by id from the specified order or <c>null</c> if order doesn't exist or doesn't contain guest with that id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetProductsByOrder(Resto.Front.Api.V3.Data.Orders.IOrder)">
            <summary>
            Returns products of the specified order.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetProductsByOrder(Resto.Front.Api.V3.Data.Orders.IOrder)">
            <summary>
            Returns products of the specified order or <c>null</c> if order doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetProductByOrder(Resto.Front.Api.V3.Data.Orders.IOrder,System.Guid)">
            <summary>
            Returns product by id from the specified order.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetProductByOrder(Resto.Front.Api.V3.Data.Orders.IOrder,System.Guid)">
            <summary>
            Returns product by id from the specified order or <c>null</c> if order doesn't exist or doesn't contain product with that id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetAssignedModifiersByOrderItemProduct(Resto.Front.Api.V3.Data.Orders.IOrderItemProduct)">
            <summary>
            Returns assignedModifiers of the specified orderItemProduct.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetAssignedModifiersByOrderItemProduct(Resto.Front.Api.V3.Data.Orders.IOrderItemProduct)">
            <summary>
            Returns assignedModifiers of the specified orderItemProduct or <c>null</c> if orderItemProduct doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetAssignedModifierByOrderItemProduct(Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,System.Guid)">
            <summary>
            Returns assignedModifier by id from the specified orderItemProduct.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetAssignedModifierByOrderItemProduct(Resto.Front.Api.V3.Data.Orders.IOrderItemProduct,System.Guid)">
            <summary>
            Returns assignedModifier by id from the specified orderItemProduct or <c>null</c> if orderItemProduct doesn't exist or doesn't contain assignedModifier with that id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetPaymentsByOrder(Resto.Front.Api.V3.Data.Orders.IOrder)">
            <summary>
            Returns payments of the specified order.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetPaymentsByOrder(Resto.Front.Api.V3.Data.Orders.IOrder)">
            <summary>
            Returns payments of the specified order or <c>null</c> if order doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.GetPaymentByOrder(Resto.Front.Api.V3.Data.Orders.IOrder,System.Guid)">
            <summary>
            Returns payment by id from the specified order.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.V3.IOperationService.TryGetPaymentByOrder(Resto.Front.Api.V3.Data.Orders.IOrder,System.Guid)">
            <summary>
            Returns payment by id from the specified order or <c>null</c> if order doesn't exist or doesn't contain payment with that id.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.V3.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Properties.Resources.ReducedAddressBuildingFormat">
            <summary>
              Looks up a localized string similar to кор. {0} .
            </summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Properties.Resources.ReducedAddressCityFormat">
            <summary>
              Looks up a localized string similar to г. {0} .
            </summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Properties.Resources.ReducedAddressFlatFormat">
            <summary>
              Looks up a localized string similar to кв. {0} .
            </summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Properties.Resources.ReducedAddressHouseFormat">
            <summary>
              Looks up a localized string similar to д. {0} .
            </summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Properties.Resources.ReducedAddressStreetFormat">
            <summary>
              Looks up a localized string similar to ул. {0} .
            </summary>
        </member>
        <member name="P:Resto.Front.Api.V3.Properties.Resources.ReducedAddressStringViewFormat">
            <summary>
              Looks up a localized string similar to {0:city}{1:street}{2:house}{3:building}{4:flat}.
            </summary>
        </member>
    </members>
</doc>
